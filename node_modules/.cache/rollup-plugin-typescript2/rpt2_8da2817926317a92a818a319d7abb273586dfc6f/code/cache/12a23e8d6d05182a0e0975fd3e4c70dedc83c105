{"code":"import * as tslib_1 from \"tslib\";\r\nimport { CombatSetups, Roles } from '../../creepSetups/setups';\r\nimport { OverlordPriority } from '../../priorities/priorities_overlords';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { Overlord } from '../Overlord';\r\n/**\r\n * Guard swarm overlord: spawns lots of smaller guards to deal with swarm-like attacks or harassments\r\n */\r\nlet GuardSwarmOverlord = class GuardSwarmOverlord extends Overlord {\r\n    constructor(directive, priority = OverlordPriority.outpostDefense.guard) {\r\n        super(directive, 'swarmGuard', priority);\r\n        this.directive = directive;\r\n        this.guards = this.combatZerg(Roles.guardMelee);\r\n    }\r\n    findAttackTarget(guard) {\r\n        if (guard.room.hostiles.length > 0) {\r\n            const targets = _.filter(guard.room.hostiles, hostile => hostile.pos.rangeToEdge > 0);\r\n            return guard.pos.findClosestByRange(targets);\r\n        }\r\n        if (guard.room.hostileStructures.length > 0) {\r\n            return guard.pos.findClosestByRange(guard.room.hostileStructures);\r\n        }\r\n    }\r\n    handleGuard(guard) {\r\n        if (guard.pos.roomName != this.pos.roomName) { // TODO: make edge-safe\r\n            // Move into the assigned room if there is a guard flag present\r\n            guard.goToRoom(this.pos.roomName);\r\n        }\r\n        else { // If you're in the assigned room or if there is no assignment, try to attack or heal\r\n            const attackTarget = this.findAttackTarget(guard);\r\n            if (attackTarget) {\r\n                guard.attackAndChase(attackTarget);\r\n            }\r\n            else {\r\n                guard.park(this.pos); // Move off-road\r\n            }\r\n        }\r\n    }\r\n    init() {\r\n        if (this.directive.memory.amount) {\r\n            this.wishlist(this.directive.memory.amount, CombatSetups.broodlings.early);\r\n        }\r\n        else {\r\n            if (this.room) {\r\n                const smallHostiles = _.filter(this.room.dangerousHostiles, creep => creep.body.length < 10);\r\n                if (smallHostiles.length > 2) {\r\n                    this.wishlist(Math.round(smallHostiles.length), CombatSetups.broodlings.early);\r\n                }\r\n            }\r\n            else {\r\n                this.wishlist(2, CombatSetups.broodlings.early);\r\n            }\r\n        }\r\n    }\r\n    run() {\r\n        for (const guard of this.guards) {\r\n            // Run the creep if it has a task given to it by something else; otherwise, proceed with non-task actions\r\n            if (guard.hasValidTask) {\r\n                guard.run();\r\n            }\r\n            else {\r\n                this.handleGuard(guard);\r\n            }\r\n        }\r\n    }\r\n};\r\nGuardSwarmOverlord = tslib_1.__decorate([\r\n    profile\r\n], GuardSwarmOverlord);\r\nexport { GuardSwarmOverlord };\r\n","references":["C:/git/Overmind/src/creepSetups/setups.ts","C:/git/Overmind/src/directives/defense/guard.ts","C:/git/Overmind/src/priorities/priorities_overlords.ts","C:/git/Overmind/src/profiler/decorator.ts","C:/git/Overmind/src/zerg/CombatZerg.ts","C:/git/Overmind/src/zerg/Zerg.ts","C:/git/Overmind/src/overlords/Overlord.ts"]}
