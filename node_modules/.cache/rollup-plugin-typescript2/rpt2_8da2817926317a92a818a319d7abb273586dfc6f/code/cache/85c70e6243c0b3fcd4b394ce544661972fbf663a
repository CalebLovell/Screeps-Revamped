{"code":"\"use strict\";\r\n// Creep properties ====================================================================================================\r\n// Boosting logic ------------------------------------------------------------------------------------------------------\r\nObject.defineProperty(Creep.prototype, 'boosts', {\r\n    get() {\r\n        if (!this._boosts) {\r\n            this._boosts = _.compact(_.unique(_.map(this.body, bodyPart => bodyPart.boost)));\r\n        }\r\n        return this._boosts;\r\n        // return _.compact(_.unique(_.map(this.body as BodyPartDefinition[],\r\n        // \t\t\t\t\t\t\t\tbodyPart => bodyPart.boost))) as _ResourceConstantSansEnergy[];\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Creep.prototype, 'boostCounts', {\r\n    get() {\r\n        if (!this._boostCounts) {\r\n            this._boostCounts = _.countBy(this.body, bodyPart => bodyPart.boost);\r\n        }\r\n        return this._boostCounts;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Creep.prototype, 'inRampart', {\r\n    get() {\r\n        return !!this.pos.lookForStructure(STRUCTURE_RAMPART); // this assumes hostile creeps can't stand in my ramparts\r\n    },\r\n    configurable: true,\r\n});\r\n","references":[]}
