{"code":"// Global settings file containing player information\r\nimport { leftAngleQuote, rightAngleQuote } from './utilities/stringConstants';\r\nimport { getReinforcementLearningTrainingVerbosity, getUsername, onPublicServer, onTrainingEnvironment } from './utilities/utils';\r\n/**\r\n * My Screeps username; used for a variety of updating and communications purposes. (Changing this might break things.)\r\n */\r\nexport const MUON = 'Muon';\r\n/**\r\n * Your username - you shouldn't need to change this.\r\n */\r\nexport const MY_USERNAME = getUsername();\r\n/**\r\n * Enable this to build from source including screeps-profiler. (This is separate from Overmind-Profiler.)\r\n */\r\nexport const USE_PROFILER = false;\r\n/**\r\n * Profiling is incredibly expensive and can cause the script to time out. By setting this option, you can limit the\r\n * number of colonies that will be handled while profiling. Colonies above this limit do not get run.\r\n */\r\nexport const PROFILER_COLONY_LIMIT = Math.ceil(Game.gcl.level / 2);\r\n/**\r\n * While profiling, ensure these colonies are included in the randomly chosen ones specified by PROFILER_COLONY_LIMIT.\r\n */\r\nexport const PROFILER_INCLUDE_COLONIES = [ /*'E15S49'*/];\r\n/**\r\n * Enable this to wrap evaluations of constructor, init, and run phase for each colony in try...catch statemenets.\r\n */\r\nexport const USE_TRY_CATCH = true;\r\n/**\r\n * Default controller signature; don't change this.\r\n * You can set your controller signature with the console command \"setSignature()\"\r\n * Operation will be penalized by skipping every 3rd tick for using a signature that does not contain the substring\r\n * \"overmind\" or the small-caps variant.\r\n */\r\nconst OVERMIND_PLAIN = 'Overmind';\r\nexport const OVERMIND_SMALL_CAPS = '\\u1D0F\\u1D20\\u1D07\\u0280\\u1D0D\\u026A\\u0274\\u1D05';\r\nexport const DEFAULT_OVERMIND_SIGNATURE = leftAngleQuote + OVERMIND_SMALL_CAPS + rightAngleQuote;\r\nglobal.__DEFAULT_OVERMIND_SIGNATURE__ = DEFAULT_OVERMIND_SIGNATURE;\r\n/**\r\n * If this is enabled, Memory.bot will default to true. This will not change the mode if already set - use setMode().\r\n */\r\nexport const DEFAULT_OPERATION_MODE = 'automatic';\r\n/**\r\n * Limit how many rooms you can claim (for any shard)\r\n */\r\nexport const MAX_OWNED_ROOMS = Infinity;\r\n/**\r\n * If you are running on shard3 (CPU limit 20), only claim this many rooms\r\n */\r\nexport const SHARD3_MAX_OWNED_ROOMS = 3;\r\n/**\r\n * The global Overmind object will be re-instantiated after this many ticks. In the meantime, refresh() is used.\r\n */\r\nexport const NEW_OVERMIND_INTERVAL = onPublicServer() ? 20 : 5;\r\n/**\r\n * Master scale for the RoomVisuals GUI // todo: not plugged in yet\r\n */\r\nexport const GUI_SCALE = 1.0;\r\n/**\r\n * If this is set to true, a stripped-down version of Overmind suitable for training with my python screeps environment\r\n * will be run instead. The main loop will be disabled and creeps will be controlled based on serialized actions\r\n * communicated to them from the RL model through memory.\r\n * WARNING: enabling RL_TRAINING_MODE will wipe the contents of your memory!\r\n */\r\nexport const RL_TRAINING_MODE = onTrainingEnvironment();\r\n/**\r\n * Configure how much stuff gets logged to console\r\n * 0: no logging\r\n * 1: log every 100th, 101th tick\r\n * 2: log every tick\r\n */\r\nexport const RL_TRAINING_VERBOSITY = getReinforcementLearningTrainingVerbosity();\r\n","references":["C:/git/Overmind/src/utilities/stringConstants.ts","C:/git/Overmind/src/utilities/utils.ts"]}
