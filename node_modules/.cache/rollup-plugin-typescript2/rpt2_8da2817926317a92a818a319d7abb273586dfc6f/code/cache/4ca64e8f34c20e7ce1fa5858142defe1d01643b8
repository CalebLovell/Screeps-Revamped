{"code":"//\r\n// ___________________________________________________________\r\n//\r\n//  _____  _    _ _______  ______ _______ _____ __   _ ______\r\n// |     |  \\  /  |______ |_____/ |  |  |   |   | \\  | |     \\\r\n// |_____|   \\/   |______ |    \\_ |  |  | __|__ |  \\_| |_____/\r\n//\r\n// _______________________ Screeps AI ________________________\r\n//\r\n//\r\n// Overmind repository: github.com/bencbartlett/overmind\r\n//\r\n// @formatter:off\r\n/* tslint:disable:ordered-imports */\r\n'use strict';\r\n// Import ALL the things! ==============================================================================================\r\nimport './assimilation/initializer'; // This must always be imported before anything else\r\nimport './console/globals'; // Global functions accessible from CLI\r\nimport './prototypes/Creep'; // Creep prototypes\r\nimport './prototypes/RoomObject'; // RoomObject and targeting prototypes\r\nimport './prototypes/RoomPosition'; // RoomPosition prototypes\r\nimport './prototypes/RoomVisual'; // Prototypes used in Visualizer class\r\nimport './prototypes/Room'; // Non-structure room prototypes\r\nimport './prototypes/RoomStructures'; // IVM-cached structure prototypes\r\nimport './prototypes/Structures'; // Prototypes for accessed structures\r\nimport './prototypes/Miscellaneous'; // Everything else\r\nimport './tasks/initializer'; // This line is necessary to ensure proper compilation ordering...\r\nimport './zerg/CombatZerg'; // ...so is this one... rollup is dumb about generating reference errors\r\nimport { MUON, MY_USERNAME, RL_TRAINING_MODE, USE_PROFILER } from './~settings';\r\nimport { sandbox } from './sandbox';\r\nimport { Mem } from './memory/Memory';\r\nimport { OvermindConsole } from './console/Console';\r\nimport { Stats } from './stats/stats';\r\nimport profiler from './profiler/screeps-profiler';\r\nimport _Overmind from './Overmind_obfuscated'; // this should be './Overmind_obfuscated' unless you are me\r\nimport { VersionMigration } from './versionMigration/migrator';\r\nimport { RemoteDebugger } from './debug/remoteDebugger';\r\nimport { ActionParser } from './reinforcementLearning/actionParser';\r\n// =====================================================================================================================\r\n// Main loop\r\nfunction main() {\r\n    // Memory operations: load and clean memory, suspend operation as needed -------------------------------------------\r\n    Mem.load(); // Load previous parsed memory if present\r\n    if (!Mem.shouldRun())\r\n        return; // Suspend operation if necessary\r\n    Mem.clean(); // Clean memory contents\r\n    // Instantiation operations: build or refresh the game state -------------------------------------------------------\r\n    if (!Overmind || Overmind.shouldBuild || Game.time >= Overmind.expiration) {\r\n        delete global.Overmind; // Explicitly delete the old Overmind object\r\n        Mem.garbageCollect(true); // Run quick garbage collection\r\n        global.Overmind = new _Overmind(); // Instantiate the Overmind object\r\n        Overmind.build(); // Build phase: instantiate all game components\r\n    }\r\n    else {\r\n        Overmind.refresh(); // Refresh phase: update the Overmind state\r\n    }\r\n    // Tick loop cycle: initialize and run each component --------------------------------------------------------------\r\n    Overmind.init(); // Init phase: spawning and energy requests\r\n    Overmind.run(); // Run phase: execute state-changing actions\r\n    Overmind.visuals(); // Draw visuals\r\n    Stats.run(); // Record statistics\r\n    // Post-run code: handle sandbox code and error catching -----------------------------------------------------------\r\n    sandbox(); // Sandbox: run any testing code\r\n    global.remoteDebugger.run(); // Run remote debugger code if enabled\r\n    Overmind.postRun(); // Error catching is run at end of every tick\r\n}\r\n// Main loop if RL mode is enabled (~settings.ts)\r\nfunction main_RL() {\r\n    Mem.clean();\r\n    delete global.Overmind;\r\n    global.Overmind = new _Overmind();\r\n    ActionParser.run();\r\n}\r\n// This gets run on each global reset\r\nfunction onGlobalReset() {\r\n    if (USE_PROFILER)\r\n        profiler.enable();\r\n    Mem.format();\r\n    OvermindConsole.init();\r\n    VersionMigration.run();\r\n    Memory.stats.persistent.lastGlobalReset = Game.time;\r\n    OvermindConsole.printUpdateMessage();\r\n    // Update the master ledger of valid checksums\r\n    if (MY_USERNAME == MUON) {\r\n        Assimilator.updateValidChecksumLedger();\r\n    }\r\n    // Make a new Overmind object\r\n    global.Overmind = new _Overmind();\r\n    // Make a remote debugger\r\n    global.remoteDebugger = new RemoteDebugger();\r\n}\r\n// Global reset function if RL mode is enabled\r\nfunction onGlobalReset_RL() {\r\n    Mem.format();\r\n}\r\n// Decide which loop to export as the script loop\r\nlet _loop;\r\nif (RL_TRAINING_MODE) {\r\n    // Use stripped version for training reinforcment learning model\r\n    _loop = main_RL;\r\n}\r\nelse {\r\n    if (USE_PROFILER) {\r\n        // Wrap the main loop in the profiler\r\n        _loop = () => profiler.wrap(main);\r\n    }\r\n    else {\r\n        // Use the default main loop\r\n        _loop = main;\r\n    }\r\n}\r\nexport const loop = _loop;\r\n// Run the appropriate global reset function\r\nif (RL_TRAINING_MODE) {\r\n    OvermindConsole.printTrainingMessage();\r\n    onGlobalReset_RL();\r\n}\r\nelse {\r\n    // Register these functions for checksum computations with the Assimilator\r\n    Assimilator.validate(main);\r\n    Assimilator.validate(loop);\r\n    // Run the global reset code\r\n    onGlobalReset();\r\n}\r\n","references":["C:/git/Overmind/src/assimilation/initializer.ts","C:/git/Overmind/src/console/globals.ts","C:/git/Overmind/src/prototypes/Creep.ts","C:/git/Overmind/src/prototypes/RoomObject.ts","C:/git/Overmind/src/prototypes/RoomPosition.ts","C:/git/Overmind/src/prototypes/RoomVisual.ts","C:/git/Overmind/src/prototypes/Room.ts","C:/git/Overmind/src/prototypes/RoomStructures.ts","C:/git/Overmind/src/prototypes/Structures.ts","C:/git/Overmind/src/prototypes/Miscellaneous.ts","C:/git/Overmind/src/tasks/initializer.ts","C:/git/Overmind/src/zerg/CombatZerg.ts","C:/git/Overmind/src/~settings.ts","C:/git/Overmind/src/sandbox.ts","C:/git/Overmind/src/memory/Memory.ts","C:/git/Overmind/src/console/Console.ts","C:/git/Overmind/src/stats/stats.ts","C:/git/Overmind/src/profiler/screeps-profiler.js","C:/git/Overmind/src/Overmind_obfuscated.js","C:/git/Overmind/src/versionMigration/migrator.ts","C:/git/Overmind/src/debug/remoteDebugger.ts","C:/git/Overmind/src/reinforcementLearning/actionParser.ts"]}
