{"code":"import * as tslib_1 from \"tslib\";\r\nimport { log } from '../../console/log';\r\nimport { Roles, Setups } from '../../creepSetups/setups';\r\nimport { isStoreStructure } from '../../declarations/typeGuards';\r\nimport { Energetics } from '../../logistics/Energetics';\r\nimport { Pathing } from '../../movement/Pathing';\r\nimport { OverlordPriority } from '../../priorities/priorities_overlords';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { Tasks } from '../../tasks/Tasks';\r\nimport { Overlord } from '../Overlord';\r\n/**\r\n * Spawns special-purpose haulers for transporting resources to/from a specified target\r\n */\r\nlet HaulingOverlord = class HaulingOverlord extends Overlord {\r\n    constructor(directive, priority = directive.hasDrops ? OverlordPriority.collectionUrgent.haul :\r\n        OverlordPriority.collection.haul) {\r\n        super(directive, 'haul', priority);\r\n        this.directive = directive;\r\n        this.haulers = this.zerg(Roles.transport);\r\n    }\r\n    init() {\r\n        if (!this.colony.storage || _.sum(this.colony.storage.store) > Energetics.settings.storage.total.cap) {\r\n            return;\r\n        }\r\n        // Spawn a number of haulers sufficient to move all resources within a lifetime, up to a max\r\n        const MAX_HAULERS = 5;\r\n        // Calculate total needed amount of hauling power as (resource amount * trip distance)\r\n        const tripDistance = 2 * Pathing.distance((this.colony.storage || this.colony).pos, this.directive.pos);\r\n        const haulingPowerNeeded = Math.min(this.directive.totalResources, this.colony.storage.storeCapacity\r\n            - _.sum(this.colony.storage.store)) * tripDistance;\r\n        // Calculate amount of hauling each hauler provides in a lifetime\r\n        const haulerCarryParts = Setups.transporters.early.getBodyPotential(CARRY, this.colony);\r\n        const haulingPowerPerLifetime = CREEP_LIFE_TIME * haulerCarryParts * CARRY_CAPACITY;\r\n        // Calculate number of haulers\r\n        const numHaulers = Math.min(Math.ceil(haulingPowerNeeded / haulingPowerPerLifetime), MAX_HAULERS);\r\n        // Request the haulers\r\n        this.wishlist(numHaulers, Setups.transporters.early);\r\n    }\r\n    handleHauler(hauler) {\r\n        if (_.sum(hauler.carry) == 0) {\r\n            // Travel to directive and collect resources\r\n            if (hauler.inSameRoomAs(this.directive)) {\r\n                // Pick up drops first\r\n                if (this.directive.hasDrops) {\r\n                    const allDrops = _.flatten(_.values(this.directive.drops));\r\n                    const drop = allDrops[0];\r\n                    if (drop) {\r\n                        hauler.task = Tasks.pickup(drop);\r\n                        return;\r\n                    }\r\n                }\r\n                // Withdraw from store structure\r\n                if (this.directive.storeStructure) {\r\n                    let store = {};\r\n                    if (isStoreStructure(this.directive.storeStructure)) {\r\n                        store = this.directive.storeStructure.store;\r\n                    }\r\n                    else {\r\n                        store = { energy: this.directive.storeStructure.energy };\r\n                    }\r\n                    for (const resourceType in store) {\r\n                        if (store[resourceType] > 0) {\r\n                            hauler.task = Tasks.withdraw(this.directive.storeStructure, resourceType);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                // Shouldn't reach here\r\n                log.warning(`${hauler.name} in ${hauler.room.print}: nothing to collect!`);\r\n            }\r\n            else {\r\n                // hauler.task = Tasks.goTo(this.directive);\r\n                hauler.goTo(this.directive);\r\n            }\r\n        }\r\n        else {\r\n            // Travel to colony room and deposit resources\r\n            if (hauler.inSameRoomAs(this.colony)) {\r\n                // Put energy in storage and minerals in terminal if there is one\r\n                for (const resourceType in hauler.carry) {\r\n                    if (hauler.carry[resourceType] == 0)\r\n                        continue;\r\n                    if (resourceType == RESOURCE_ENERGY) { // prefer to put energy in storage\r\n                        if (this.colony.storage && _.sum(this.colony.storage.store) < STORAGE_CAPACITY) {\r\n                            hauler.task = Tasks.transfer(this.colony.storage, resourceType);\r\n                            return;\r\n                        }\r\n                        else if (this.colony.terminal && _.sum(this.colony.terminal.store) < TERMINAL_CAPACITY) {\r\n                            hauler.task = Tasks.transfer(this.colony.terminal, resourceType);\r\n                            return;\r\n                        }\r\n                    }\r\n                    else { // prefer to put minerals in terminal\r\n                        if (this.colony.terminal && _.sum(this.colony.terminal.store) < TERMINAL_CAPACITY) {\r\n                            hauler.task = Tasks.transfer(this.colony.terminal, resourceType);\r\n                            return;\r\n                        }\r\n                        else if (this.colony.storage && _.sum(this.colony.storage.store) < STORAGE_CAPACITY) {\r\n                            hauler.task = Tasks.transfer(this.colony.storage, resourceType);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                // Shouldn't reach here\r\n                log.warning(`${hauler.name} in ${hauler.room.print}: nowhere to put resources!`);\r\n            }\r\n            else {\r\n                hauler.task = Tasks.goToRoom(this.colony.room.name);\r\n            }\r\n        }\r\n    }\r\n    run() {\r\n        for (const hauler of this.haulers) {\r\n            if (hauler.isIdle) {\r\n                this.handleHauler(hauler);\r\n            }\r\n            hauler.run();\r\n        }\r\n    }\r\n};\r\nHaulingOverlord = tslib_1.__decorate([\r\n    profile\r\n], HaulingOverlord);\r\nexport { HaulingOverlord };\r\n","references":["C:/git/Overmind/src/console/log.ts","C:/git/Overmind/src/creepSetups/setups.ts","C:/git/Overmind/src/declarations/typeGuards.ts","C:/git/Overmind/src/directives/resource/haul.ts","C:/git/Overmind/src/logistics/Energetics.ts","C:/git/Overmind/src/movement/Pathing.ts","C:/git/Overmind/src/priorities/priorities_overlords.ts","C:/git/Overmind/src/profiler/decorator.ts","C:/git/Overmind/src/tasks/Tasks.ts","C:/git/Overmind/src/zerg/Zerg.ts","C:/git/Overmind/src/overlords/Overlord.ts"]}
