{"code":"// Room prototypes - commonly used room properties and methods\r\nimport { MY_USERNAME } from '../~settings';\r\n// Logging =============================================================================================================\r\nObject.defineProperty(Room.prototype, 'print', {\r\n    get() {\r\n        return '<a href=\"#!/room/' + Game.shard.name + '/' + this.name + '\">' + this.name + '</a>';\r\n    },\r\n    configurable: true,\r\n});\r\n// Room properties =====================================================================================================\r\nObject.defineProperty(Room.prototype, 'my', {\r\n    get() {\r\n        return this.controller && this.controller.my;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'isOutpost', {\r\n    get() {\r\n        return Overmind.colonyMap[this.name] != undefined;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'owner', {\r\n    get() {\r\n        return this.controller && this.controller.owner ? this.controller.owner.username : undefined;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'reservedByMe', {\r\n    get() {\r\n        return this.controller && this.controller.reservation && this.controller.reservation.username == MY_USERNAME;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'signedByMe', {\r\n    get() {\r\n        return this.controller && this.controller.sign && this.controller.sign.text == Memory.settings.signature;\r\n    },\r\n    configurable: true,\r\n});\r\n// Room properties: creeps =============================================================================================\r\n// Creeps physically in the room\r\nObject.defineProperty(Room.prototype, 'creeps', {\r\n    get() {\r\n        if (!this._creeps) {\r\n            this._creeps = this.find(FIND_MY_CREEPS);\r\n        }\r\n        return this._creeps;\r\n    },\r\n    configurable: true,\r\n});\r\n// Room properties: hostiles ===========================================================================================\r\nObject.defineProperty(Room.prototype, 'hostiles', {\r\n    get() {\r\n        if (!this._hostiles) {\r\n            this._hostiles = this.find(FIND_HOSTILE_CREEPS);\r\n        }\r\n        return this._hostiles;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'invaders', {\r\n    get() {\r\n        if (!this._invaders) {\r\n            this._invaders = _.filter(this.hostiles, (creep) => creep.owner.username == 'Invader');\r\n        }\r\n        return this._invaders;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'sourceKeepers', {\r\n    get() {\r\n        if (!this._sourceKeepers) {\r\n            this._sourceKeepers = _.filter(this.hostiles, (creep) => creep.owner.username == 'Source Keeper');\r\n        }\r\n        return this._sourceKeepers;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'playerHostiles', {\r\n    get() {\r\n        if (!this._playerHostiles) {\r\n            this._playerHostiles = _.filter(this.hostiles, (creep) => creep.owner.username != 'Invader'\r\n                && creep.owner.username != 'Source Keeper');\r\n        }\r\n        return this._playerHostiles;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'dangerousHostiles', {\r\n    get() {\r\n        if (!this._dangerousHostiles) {\r\n            if (this.my) {\r\n                this._dangerousHostiles = _.filter(this.hostiles, (creep) => creep.getActiveBodyparts(ATTACK) > 0\r\n                    || creep.getActiveBodyparts(WORK) > 0\r\n                    || creep.getActiveBodyparts(RANGED_ATTACK) > 0\r\n                    || creep.getActiveBodyparts(HEAL) > 0);\r\n            }\r\n            else {\r\n                this._dangerousHostiles = _.filter(this.hostiles, (creep) => creep.getActiveBodyparts(ATTACK) > 0\r\n                    || creep.getActiveBodyparts(RANGED_ATTACK) > 0\r\n                    || creep.getActiveBodyparts(HEAL) > 0);\r\n            }\r\n        }\r\n        return this._dangerousHostiles;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'dangerousPlayerHostiles', {\r\n    get() {\r\n        if (!this._dangerousPlayerHostiles) {\r\n            this._dangerousPlayerHostiles = _.filter(this.playerHostiles, (c) => c.getActiveBodyparts(ATTACK) > 0\r\n                || c.getActiveBodyparts(WORK) > 0\r\n                || c.getActiveBodyparts(RANGED_ATTACK) > 0\r\n                || c.getActiveBodyparts(HEAL) > 0);\r\n        }\r\n        return this._dangerousPlayerHostiles;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'fleeDefaults', {\r\n    get() {\r\n        if (!this._fleeDefaults) {\r\n            this._fleeDefaults = []\r\n                .concat(_.filter(this.hostiles, (c) => c.getActiveBodyparts(ATTACK) > 0\r\n                || c.getActiveBodyparts(RANGED_ATTACK) > 0))\r\n                .concat(_.filter(this.keeperLairs, (l) => (l.ticksToSpawn || Infinity) <= 10));\r\n        }\r\n        return this._fleeDefaults;\r\n    },\r\n    configurable: true,\r\n});\r\n// Hostile structures currently in the room\r\nObject.defineProperty(Room.prototype, 'structures', {\r\n    get() {\r\n        if (!this._allStructures) {\r\n            this._allStructures = this.find(FIND_STRUCTURES);\r\n        }\r\n        return this._allStructures;\r\n    },\r\n    configurable: true,\r\n});\r\n// Hostile structures currently in the room\r\nObject.defineProperty(Room.prototype, 'hostileStructures', {\r\n    get() {\r\n        if (!this._hostileStructures) {\r\n            this._hostileStructures = this.find(FIND_HOSTILE_STRUCTURES, { filter: (s) => s.hitsMax });\r\n        }\r\n        return this._hostileStructures;\r\n    },\r\n    configurable: true,\r\n});\r\n// Room properties: flags ==============================================================================================\r\n// Flags physically in this room\r\nObject.defineProperty(Room.prototype, 'flags', {\r\n    get() {\r\n        if (!this._flags) {\r\n            this._flags = this.find(FIND_FLAGS);\r\n        }\r\n        return this._flags;\r\n    },\r\n    configurable: true,\r\n});\r\n// Room properties: structures =========================================================================================\r\nObject.defineProperty(Room.prototype, 'constructionSites', {\r\n    get() {\r\n        if (!this._constructionSites) {\r\n            this._constructionSites = this.find(FIND_MY_CONSTRUCTION_SITES);\r\n        }\r\n        return this._constructionSites;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'tombstones', {\r\n    get() {\r\n        if (!this._tombstones) {\r\n            this._tombstones = this.find(FIND_TOMBSTONES);\r\n        }\r\n        return this._tombstones;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'drops', {\r\n    get() {\r\n        if (!this._drops) {\r\n            this._drops = _.groupBy(this.find(FIND_DROPPED_RESOURCES), (r) => r.resourceType);\r\n        }\r\n        return this._drops;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'droppedEnergy', {\r\n    get() {\r\n        return this.drops[RESOURCE_ENERGY] || [];\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'droppedPower', {\r\n    get() {\r\n        return this.drops[RESOURCE_POWER] || [];\r\n    },\r\n    configurable: true,\r\n});\r\n","references":["C:/git/Overmind/src/~settings.ts"]}
