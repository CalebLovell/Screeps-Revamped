{"code":"import * as tslib_1 from \"tslib\";\r\nimport { profile } from '../profiler/decorator';\r\n/**\r\n * The link network controls the flow of energy through various links in a room and uses a greedy matching algorithm\r\n * to determine where to send energy to\r\n */\r\nlet LinkNetwork = class LinkNetwork {\r\n    constructor(colony) {\r\n        this.colony = colony;\r\n        this.receive = [];\r\n        this.transmit = [];\r\n        this.settings = {\r\n            linksTrasmitAt: LINK_CAPACITY - 100,\r\n        };\r\n    }\r\n    refresh() {\r\n        this.receive = [];\r\n        this.transmit = [];\r\n    }\r\n    claimLink(link) {\r\n        if (link) {\r\n            _.remove(this.colony.availableLinks, l => l.id == link.id);\r\n        }\r\n    }\r\n    requestReceive(link) {\r\n        this.receive.push(link);\r\n    }\r\n    requestTransmit(link) {\r\n        this.transmit.push(link);\r\n    }\r\n    /**\r\n     * Number of ticks until a dropoff link is available again to deposit energy to\r\n     */\r\n    getDropoffAvailability(link) {\r\n        const dest = this.colony.commandCenter ? this.colony.commandCenter.pos : this.colony.pos;\r\n        const usualCooldown = link.pos.getRangeTo(dest);\r\n        if (link.energy > this.settings.linksTrasmitAt) { // Energy will be sent next time cooldown == 0\r\n            return link.cooldown + usualCooldown;\r\n        }\r\n        else {\r\n            return link.cooldown;\r\n        }\r\n    }\r\n    init() {\r\n        // for (let link of this.colony.dropoffLinks) {\r\n        // \tif (link.energy > this.settings.linksTrasmitAt) {\r\n        // \t\tthis.requestTransmit(link);\r\n        // \t}\r\n        // }\r\n    }\r\n    /**\r\n     * Examine the link resource requests and try to efficiently (but greedily) match links that need energy in and\r\n     * out, then send the remaining resourceOut link requests to the command center link\r\n     */\r\n    run() {\r\n        // For each receiving link, greedily get energy from the closest transmitting link - at most 9 operations\r\n        for (const receiveLink of this.receive) {\r\n            const closestTransmitLink = receiveLink.pos.findClosestByRange(this.transmit);\r\n            // If a send-receive match is found, transfer that first, then remove the pair from the link lists\r\n            if (closestTransmitLink) {\r\n                // Send min of (all the energy in sender link, amount of available space in receiver link)\r\n                const amountToSend = _.min([closestTransmitLink.energy, receiveLink.energyCapacity - receiveLink.energy]);\r\n                closestTransmitLink.transferEnergy(receiveLink, amountToSend);\r\n                _.remove(this.transmit, link => link == closestTransmitLink);\r\n                // _.remove(this.receive, link => link == receiveLink);\r\n            }\r\n        }\r\n        // Now send all remaining transmit link requests to the command center\r\n        if (this.colony.commandCenter && this.colony.commandCenter.link) {\r\n            for (const transmitLink of this.transmit) {\r\n                transmitLink.transferEnergy(this.colony.commandCenter.link);\r\n            }\r\n        }\r\n    }\r\n};\r\nLinkNetwork = tslib_1.__decorate([\r\n    profile\r\n], LinkNetwork);\r\nexport { LinkNetwork };\r\n","references":["C:/git/Overmind/src/Colony.ts","C:/git/Overmind/src/profiler/decorator.ts"]}
