{"code":"import * as tslib_1 from \"tslib\";\r\nimport { CombatSetups, Roles } from '../../creepSetups/setups';\r\nimport { DirectiveHaul } from '../../directives/resource/haul';\r\nimport { DirectiveTargetSiege } from '../../directives/targeting/siegeTarget';\r\nimport { RoomIntel } from '../../intel/RoomIntel';\r\nimport { OverlordPriority } from '../../priorities/priorities_overlords';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { Overlord } from '../Overlord';\r\n/**\r\n * NPC defense overlord: spawns specially-optimized guards as needed to deal with standard NPC invasions\r\n */\r\nlet DefenseNPCOverlord = class DefenseNPCOverlord extends Overlord {\r\n    constructor(directive, priority = OverlordPriority.outpostDefense.guard) {\r\n        super(directive, 'guard', priority);\r\n        this.guards = this.combatZerg(Roles.guardMelee);\r\n    }\r\n    // private reassignIdleGuards(): void {\r\n    // \t// Find all idle guards\r\n    // \tlet idleGuards = _.filter(this.colony.getCreepsByRole('guard'), (guard: Zerg) => !guard.overlord);\r\n    // \t// Reassign them all to this flag\r\n    // \tfor (let guard of idleGuards) {\r\n    // \t\tguard.overlord = this;\r\n    // \t}\r\n    // \t// Refresh the list of guards\r\n    // \tthis.guards = this.creeps('guard');\r\n    // }\r\n    findAttackTarget(guard) {\r\n        const targetingDirectives = DirectiveTargetSiege.find(guard.room.flags);\r\n        const targetedStructures = _.compact(_.map(targetingDirectives, directive => directive.getTarget()));\r\n        if (targetedStructures.length > 0) {\r\n            return guard.pos.findClosestByRange(targetedStructures);\r\n        }\r\n        if (guard.room.hostiles.length > 0) {\r\n            const targets = _.filter(guard.room.hostiles, hostile => hostile.pos.rangeToEdge > 0);\r\n            return guard.pos.findClosestByRange(targets);\r\n        }\r\n        if (guard.room.hostileStructures.length > 0) {\r\n            const haulFlags = _.filter(guard.room.flags, flag => DirectiveHaul.filter(flag));\r\n            if (haulFlags.length == 0) {\r\n                return guard.pos.findClosestByRange(guard.room.hostileStructures);\r\n            }\r\n        }\r\n    }\r\n    /* Attack and chase the specified target */\r\n    combatActions(guard, target) {\r\n        // Attack the target if you can, else move to get in range\r\n        guard.attackAndChase(target);\r\n        // Heal yourself if it won't interfere with attacking\r\n        guard.healSelfIfPossible();\r\n    }\r\n    handleGuard(guard) {\r\n        if (!guard.inSameRoomAs(this) || guard.pos.isEdge) {\r\n            // Move into the assigned room if there is a guard flag present\r\n            guard.goToRoom(this.pos.roomName);\r\n        }\r\n        else { // If you're in the assigned room or if there is no assignment, try to attack or heal\r\n            const attackTarget = this.findAttackTarget(guard);\r\n            if (attackTarget) {\r\n                this.combatActions(guard, attackTarget);\r\n            }\r\n            else {\r\n                guard.doMedicActions(this.pos.roomName);\r\n            }\r\n        }\r\n    }\r\n    init() {\r\n        const amount = this.room && (this.room.invaders.length > 0 || RoomIntel.isInvasionLikely(this.room)) ? 1 : 0;\r\n        this.wishlist(amount, CombatSetups.broodlings.default, { reassignIdle: true });\r\n    }\r\n    run() {\r\n        for (const guard of this.guards) {\r\n            // Run the creep if it has a task given to it by something else; otherwise, proceed with non-task actions\r\n            if (guard.hasValidTask) {\r\n                guard.run();\r\n            }\r\n            else {\r\n                this.handleGuard(guard);\r\n            }\r\n        }\r\n    }\r\n};\r\nDefenseNPCOverlord.requiredRCL = 3;\r\nDefenseNPCOverlord = tslib_1.__decorate([\r\n    profile\r\n], DefenseNPCOverlord);\r\nexport { DefenseNPCOverlord };\r\n","references":["C:/git/Overmind/src/creepSetups/setups.ts","C:/git/Overmind/src/directives/defense/guard.ts","C:/git/Overmind/src/directives/resource/haul.ts","C:/git/Overmind/src/directives/targeting/siegeTarget.ts","C:/git/Overmind/src/intel/RoomIntel.ts","C:/git/Overmind/src/priorities/priorities_overlords.ts","C:/git/Overmind/src/profiler/decorator.ts","C:/git/Overmind/src/zerg/CombatZerg.ts","C:/git/Overmind/src/overlords/Overlord.ts"]}
