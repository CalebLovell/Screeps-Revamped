{"code":"import * as tslib_1 from \"tslib\";\r\n/* Generate stable matching between string-indexed bipartite groups with possibly unequal numbers using Gale-Shapley */\r\nimport { profile } from '../profiler/decorator';\r\nlet Matcher = class Matcher {\r\n    constructor(menPrefs, womenPrefs) {\r\n        this.menPrefs = menPrefs;\r\n        this.womenPrefs = womenPrefs;\r\n        this.men = _.keys(menPrefs);\r\n        this.women = _.keys(womenPrefs);\r\n        this.menFree = _.zipObject(this.men, _.map(this.men, man => true));\r\n        this.womenFree = _.zipObject(this.women, _.map(this.women, woman => true));\r\n        this.couples = {};\r\n    }\r\n    /* Return whether the woman prefer man1 over man2 */\r\n    prefers(woman, man1, man2) {\r\n        return _.indexOf(this.womenPrefs[woman], man1) < _.indexOf(this.womenPrefs[woman], man2);\r\n    }\r\n    /* Engage a couple <3 */\r\n    engage(man, woman) {\r\n        this.menFree[man] = false;\r\n        this.womenFree[woman] = false;\r\n        _.remove(this.menPrefs[man], w => w == woman); // Remove the woman that the man proposed to\r\n        // Don't remove from women prefs since we're matching from men side\r\n        this.couples[man] = woman;\r\n    }\r\n    /* Break up a couple... </3 :'( */\r\n    breakup(man, woman) {\r\n        this.menFree[man] = true;\r\n        this.womenFree[woman] = true;\r\n        // Don't do anything to the preferences of men or women since they've already proposed\r\n        delete this.couples[man];\r\n    }\r\n    /* Return the first free man who still has someone left to propose to */\r\n    nextMan() {\r\n        return _.find(this.men, man => this.menFree[man] && this.menPrefs[man].length > 0);\r\n    }\r\n    match() {\r\n        const MAX_ITERATIONS = 1000;\r\n        let count = 0;\r\n        let man = this.nextMan();\r\n        while (man) { // While there exists a free man who still has someone to propose to\r\n            if (count > MAX_ITERATIONS) {\r\n                console.log('Stable matching timed out!');\r\n                return this.couples;\r\n            }\r\n            const woman = _.first(this.menPrefs[man]); // Get first woman on man's list\r\n            if (this.womenFree[woman]) { // If woman is free, get engaged\r\n                this.engage(man, woman);\r\n            }\r\n            else { // Else if woman prefers this man to her current, swap men\r\n                const currentMan = _.findKey(this.couples, w => w == woman);\r\n                if (this.prefers(woman, man, currentMan)) {\r\n                    this.breakup(currentMan, woman);\r\n                    this.engage(man, woman);\r\n                }\r\n                else {\r\n                    _.remove(this.menPrefs[man], w => w == woman); // Record an unsuccessful proposal\r\n                }\r\n            }\r\n            man = this.nextMan();\r\n            count++;\r\n        }\r\n        return this.couples;\r\n    }\r\n};\r\nMatcher = tslib_1.__decorate([\r\n    profile\r\n], Matcher);\r\nexport { Matcher };\r\n","references":["C:/git/Overmind/src/profiler/decorator.ts"]}
