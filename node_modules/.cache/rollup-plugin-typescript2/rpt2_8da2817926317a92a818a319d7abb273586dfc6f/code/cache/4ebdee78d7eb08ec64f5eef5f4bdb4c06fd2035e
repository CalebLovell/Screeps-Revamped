{"code":"import * as tslib_1 from \"tslib\";\r\nimport { isEnergyStructure, isStoreStructure } from '../../declarations/typeGuards';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { Task } from '../Task';\r\nexport const transferTaskName = 'transfer';\r\nlet TaskTransfer = class TaskTransfer extends Task {\r\n    constructor(target, resourceType = RESOURCE_ENERGY, amount, options = {}) {\r\n        super(transferTaskName, target, options);\r\n        // Settings\r\n        this.settings.oneShot = true;\r\n        this.data.resourceType = resourceType;\r\n        this.data.amount = amount;\r\n    }\r\n    isValidTask() {\r\n        const amount = this.data.amount || 1;\r\n        const resourcesInCarry = this.creep.carry[this.data.resourceType] || 0;\r\n        return resourcesInCarry >= amount;\r\n    }\r\n    isValidTarget() {\r\n        const amount = this.data.amount || 1;\r\n        const target = this.target;\r\n        if (target instanceof Creep) {\r\n            return _.sum(target.carry) <= target.carryCapacity - amount;\r\n        }\r\n        else if (isStoreStructure(target)) {\r\n            return _.sum(target.store) <= target.storeCapacity - amount;\r\n        }\r\n        else if (isEnergyStructure(target) && this.data.resourceType == RESOURCE_ENERGY) {\r\n            return target.energy <= target.energyCapacity - amount;\r\n        }\r\n        else {\r\n            if (target instanceof StructureLab) {\r\n                return (target.mineralType == this.data.resourceType || !target.mineralType) &&\r\n                    target.mineralAmount <= target.mineralCapacity - amount;\r\n            }\r\n            else if (target instanceof StructureNuker) {\r\n                return this.data.resourceType == RESOURCE_GHODIUM &&\r\n                    target.ghodium <= target.ghodiumCapacity - amount;\r\n            }\r\n            else if (target instanceof StructurePowerSpawn) {\r\n                return this.data.resourceType == RESOURCE_POWER &&\r\n                    target.power <= target.powerCapacity - amount;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    work() {\r\n        return this.creep.transfer(this.target, this.data.resourceType, this.data.amount);\r\n    }\r\n};\r\nTaskTransfer = tslib_1.__decorate([\r\n    profile\r\n], TaskTransfer);\r\nexport { TaskTransfer };\r\n","references":["C:/git/Overmind/src/declarations/typeGuards.ts","C:/git/Overmind/src/profiler/decorator.ts","C:/git/Overmind/src/tasks/Task.ts"]}
