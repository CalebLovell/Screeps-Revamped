{"code":"function applyDistanceTransform(foregroundPixels, oob = 255) {\r\n    const dist = foregroundPixels;\r\n    // Variables to represent the 3x3 neighborhood of a pixel.\r\n    let UL, U, UR;\r\n    let L, mid, R;\r\n    let BL, B, BR;\r\n    let x, y, value;\r\n    for (y = 0; y < 50; ++y) {\r\n        for (x = 0; x < 50; ++x) {\r\n            if (foregroundPixels.get(x, y) !== 0) {\r\n                UL = dist.get(x - 1, y - 1);\r\n                U = dist.get(x, y - 1);\r\n                UR = dist.get(x + 1, y - 1);\r\n                L = dist.get(x - 1, y);\r\n                if (y == 0) {\r\n                    UL = oob;\r\n                    U = oob;\r\n                    UR = oob;\r\n                }\r\n                if (x == 0) {\r\n                    UL = oob;\r\n                    L = oob;\r\n                }\r\n                if (x == 49) {\r\n                    UR = oob;\r\n                }\r\n                dist.set(x, y, Math.min(UL, U, UR, L, 254) + 1);\r\n            }\r\n        }\r\n    }\r\n    for (y = 49; y >= 0; --y) {\r\n        for (x = 49; x >= 0; --x) {\r\n            mid = dist.get(x, y);\r\n            R = dist.get(x + 1, y);\r\n            BL = dist.get(x - 1, y + 1);\r\n            B = dist.get(x, y + 1);\r\n            BR = dist.get(x + 1, y + 1);\r\n            if (y == 49) {\r\n                BL = oob;\r\n                B = oob;\r\n                BR = oob;\r\n            }\r\n            if (x == 49) {\r\n                R = oob;\r\n                BR = oob;\r\n            }\r\n            if (x == 0) {\r\n                BL = oob;\r\n            }\r\n            value = Math.min(mid, R + 1, BL + 1, B + 1, BR + 1);\r\n            dist.set(x, y, value);\r\n        }\r\n    }\r\n    return dist;\r\n}\r\n// Compute a cost matrix for walkable pixels in a room\r\nfunction walkablePixelsForRoom(roomName) {\r\n    const costMatrix = new PathFinder.CostMatrix();\r\n    const terrain = Game.map.getRoomTerrain(roomName);\r\n    for (let y = 0; y < 50; ++y) {\r\n        for (let x = 0; x < 50; ++x) {\r\n            if (terrain.get(x, y) != TERRAIN_MASK_WALL) {\r\n                costMatrix.set(x, y, 1);\r\n            }\r\n        }\r\n    }\r\n    return costMatrix;\r\n}\r\nfunction wallOrAdjacentToExit(x, y, roomName) {\r\n    const terrain = Game.map.getRoomTerrain(roomName);\r\n    if (1 < x && x < 48 && 1 < y && y < 48) {\r\n        return terrain.get(x, y) == TERRAIN_MASK_WALL;\r\n    }\r\n    if (0 == x || 0 == y || 49 == x || 49 == y) {\r\n        return true;\r\n    }\r\n    if (terrain.get(x, y) == TERRAIN_MASK_WALL) {\r\n        return true;\r\n    }\r\n    // If we've reached here then position is a walkable neighbor to an exit tile\r\n    let A, B, C;\r\n    if (x == 1) {\r\n        A = terrain.get(0, y - 1);\r\n        B = terrain.get(0, y);\r\n        C = terrain.get(0, y + 1);\r\n    }\r\n    else if (x == 48) {\r\n        A = terrain.get(49, y - 1);\r\n        B = terrain.get(49, y);\r\n        C = terrain.get(49, y + 1);\r\n    }\r\n    if (y == 1) {\r\n        A = terrain.get(x - 1, 0);\r\n        B = terrain.get(x, 0);\r\n        C = terrain.get(x + 1, 0);\r\n    }\r\n    else if (y == 48) {\r\n        A = terrain.get(x - 1, 49);\r\n        B = terrain.get(x, 49);\r\n        C = terrain.get(x + 1, 49);\r\n    }\r\n    return !(A == TERRAIN_MASK_WALL && B == TERRAIN_MASK_WALL && C == TERRAIN_MASK_WALL);\r\n}\r\n// Compute positions where you can build movement-blocking structures in a room\r\nfunction blockablePixelsForRoom(roomName) {\r\n    const costMatrix = new PathFinder.CostMatrix();\r\n    for (let y = 0; y < 50; ++y) {\r\n        for (let x = 0; x < 50; ++x) {\r\n            if (!wallOrAdjacentToExit(x, y, roomName)) {\r\n                costMatrix.set(x, y, 1);\r\n            }\r\n        }\r\n    }\r\n    return costMatrix;\r\n}\r\n// Visualize a given costMatrix globally\r\nfunction displayCostMatrix(costMatrix, color = '#ff0000') {\r\n    const vis = new RoomVisual();\r\n    let max = 1;\r\n    for (let y = 0; y < 50; ++y) {\r\n        for (let x = 0; x < 50; ++x) {\r\n            max = Math.max(max, costMatrix.get(x, y));\r\n        }\r\n    }\r\n    for (let y = 0; y < 50; ++y) {\r\n        for (let x = 0; x < 50; ++x) {\r\n            const value = costMatrix.get(x, y);\r\n            if (value > 0) {\r\n                vis.circle(x, y, { radius: costMatrix.get(x, y) / max / 2, fill: color });\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function testDistanceTransform(roomName = 'sim') {\r\n    const dt = applyDistanceTransform(walkablePixelsForRoom(roomName));\r\n    displayCostMatrix(dt);\r\n}\r\nexport function distanceTransform(roomName) {\r\n    return applyDistanceTransform(walkablePixelsForRoom(roomName));\r\n}\r\n","references":[]}
