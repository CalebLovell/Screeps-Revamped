{"code":"import * as tslib_1 from \"tslib\";\r\nimport { log } from '../../console/log';\r\nimport { Roles, Setups } from '../../creepSetups/setups';\r\nimport { Pathing } from '../../movement/Pathing';\r\nimport { OverlordPriority } from '../../priorities/priorities_overlords';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { Tasks } from '../../tasks/Tasks';\r\nimport { Overlord } from '../Overlord';\r\n/**\r\n * Spawn pioneers - early workers which help to build a spawn in a new colony, then get converted to workers or drones\r\n */\r\nlet PioneerOverlord = class PioneerOverlord extends Overlord {\r\n    constructor(directive, priority = OverlordPriority.colonization.pioneer) {\r\n        super(directive, 'pioneer', priority);\r\n        this.directive = directive;\r\n        this.pioneers = this.zerg(Roles.pioneer);\r\n        this.spawnSite = this.room ? _.filter(this.room.constructionSites, s => s.structureType == STRUCTURE_SPAWN)[0] : undefined;\r\n    }\r\n    refresh() {\r\n        super.refresh();\r\n        this.spawnSite = this.room ? _.filter(this.room.constructionSites, s => s.structureType == STRUCTURE_SPAWN)[0] : undefined;\r\n    }\r\n    init() {\r\n        this.wishlist(4, Setups.pioneer);\r\n    }\r\n    findStructureBlockingController(pioneer) {\r\n        const blockingPos = Pathing.findBlockingPos(pioneer.pos, pioneer.room.controller.pos, _.filter(pioneer.room.structures, s => !s.isWalkable));\r\n        if (blockingPos) {\r\n            const structure = blockingPos.lookFor(LOOK_STRUCTURES)[0];\r\n            if (structure) {\r\n                return structure;\r\n            }\r\n            else {\r\n                log.error(`${this.print}: no structure at blocking pos ${blockingPos.print}! (Why?)`);\r\n            }\r\n        }\r\n    }\r\n    handlePioneer(pioneer) {\r\n        // Ensure you are in the assigned room\r\n        if (pioneer.room == this.room && !pioneer.pos.isEdge) {\r\n            // Remove any blocking structures preventing claimer from reaching controller\r\n            if (!this.room.my && this.room.structures.length > 0) {\r\n                const dismantleTarget = this.findStructureBlockingController(pioneer);\r\n                if (dismantleTarget) {\r\n                    pioneer.task = Tasks.dismantle(dismantleTarget);\r\n                    return;\r\n                }\r\n            }\r\n            // Build and recharge\r\n            if (pioneer.carry.energy == 0) {\r\n                pioneer.task = Tasks.recharge();\r\n            }\r\n            else if (this.room && this.room.controller &&\r\n                (this.room.controller.ticksToDowngrade < 2500 || !this.spawnSite) &&\r\n                !(this.room.controller.upgradeBlocked > 0)) {\r\n                // Save controller if it's about to downgrade or if you have nothing else to do\r\n                pioneer.task = Tasks.upgrade(this.room.controller);\r\n            }\r\n            else if (this.spawnSite) {\r\n                pioneer.task = Tasks.build(this.spawnSite);\r\n            }\r\n        }\r\n        else {\r\n            // pioneer.task = Tasks.goTo(this.pos);\r\n            pioneer.goTo(this.pos, { ensurePath: true, avoidSK: true, waypoints: this.directive.waypoints });\r\n        }\r\n    }\r\n    run() {\r\n        this.autoRun(this.pioneers, pioneer => this.handlePioneer(pioneer));\r\n    }\r\n};\r\nPioneerOverlord = tslib_1.__decorate([\r\n    profile\r\n], PioneerOverlord);\r\nexport { PioneerOverlord };\r\n","references":["C:/git/Overmind/src/console/log.ts","C:/git/Overmind/src/creepSetups/setups.ts","C:/git/Overmind/src/directives/colony/colonize.ts","C:/git/Overmind/src/movement/Pathing.ts","C:/git/Overmind/src/priorities/priorities_overlords.ts","C:/git/Overmind/src/profiler/decorator.ts","C:/git/Overmind/src/tasks/Tasks.ts","C:/git/Overmind/src/zerg/Zerg.ts","C:/git/Overmind/src/overlords/Overlord.ts"]}
