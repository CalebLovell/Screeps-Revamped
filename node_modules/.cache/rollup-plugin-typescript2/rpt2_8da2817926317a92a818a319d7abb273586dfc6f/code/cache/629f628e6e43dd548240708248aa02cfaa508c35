{"code":"// Jump table to instantiate flags based on type\r\nimport { DirectiveClearRoom } from './colony/clearRoom';\r\nimport { DirectiveColonize } from './colony/colonize';\r\nimport { DirectiveIncubate } from './colony/incubate';\r\nimport { DirectiveOutpost } from './colony/outpost';\r\nimport { DirectiveSKOutpost } from './colony/outpostSK';\r\nimport { DirectiveGuard } from './defense/guard';\r\nimport { DirectiveInvasionDefense } from './defense/invasionDefense';\r\nimport { DirectiveOutpostDefense } from './defense/outpostDefense';\r\nimport { DirectiveControllerAttack } from './offense/controllerAttack';\r\nimport { DirectivePairDestroy } from './offense/pairDestroy';\r\nimport { DirectiveSwarmDestroy } from './offense/swarmDestroy';\r\nimport { DirectiveExtract } from './resource/extract';\r\nimport { DirectiveHarvest } from './resource/harvest';\r\nimport { DirectiveHaul } from './resource/haul';\r\nimport { DirectiveRPBunker } from './roomPlanner/roomPlanner_bunker';\r\nimport { DirectiveRPCommandCenter } from './roomPlanner/roomPlanner_commandCenter';\r\nimport { DirectiveRPHatchery } from './roomPlanner/roomPlanner_hatchery';\r\nimport { DirectiveBootstrap } from './situational/bootstrap';\r\nimport { DirectiveNukeResponse } from './situational/nukeResponse';\r\nimport { DirectiveDismantle } from './targeting/dismantle';\r\nimport { DirectiveTargetSiege } from './targeting/siegeTarget';\r\nimport { DirectiveTerminalEmergencyState } from './terminalState/terminalState_emergency';\r\nimport { DirectiveTerminalEvacuateState } from './terminalState/terminalState_evacuate';\r\nimport { DirectiveTerminalRebuildState } from './terminalState/terminalState_rebuild';\r\n/**\r\n * This is the initializer for directives, which maps flags by their color code to the corresponding directive\r\n */\r\nexport function DirectiveWrapper(flag) {\r\n    switch (flag.color) {\r\n        // Colony directives ===========================================================================================\r\n        case COLOR_PURPLE:\r\n            switch (flag.secondaryColor) {\r\n                case COLOR_PURPLE:\r\n                    return new DirectiveOutpost(flag);\r\n                case COLOR_YELLOW:\r\n                    return new DirectiveSKOutpost(flag);\r\n                case COLOR_WHITE:\r\n                    return new DirectiveIncubate(flag);\r\n                case COLOR_GREY:\r\n                    return new DirectiveColonize(flag);\r\n                case COLOR_ORANGE:\r\n                    return new DirectiveClearRoom(flag);\r\n            }\r\n            break;\r\n        // Offensive combat directives =================================================================================\r\n        case COLOR_RED:\r\n            switch (flag.secondaryColor) {\r\n                case COLOR_RED:\r\n                    return new DirectiveSwarmDestroy(flag);\r\n                case COLOR_CYAN:\r\n                    return new DirectivePairDestroy(flag);\r\n                case COLOR_PURPLE:\r\n                    return new DirectiveControllerAttack(flag);\r\n            }\r\n            break;\r\n        // Defensive combat directives =================================================================================\r\n        case COLOR_BLUE:\r\n            switch (flag.secondaryColor) {\r\n                case COLOR_BLUE:\r\n                    return new DirectiveGuard(flag);\r\n                case COLOR_RED:\r\n                    return new DirectiveOutpostDefense(flag);\r\n                case COLOR_PURPLE:\r\n                    return new DirectiveInvasionDefense(flag);\r\n            }\r\n            break;\r\n        // Situational directives ======================================================================================\r\n        case COLOR_ORANGE:\r\n            switch (flag.secondaryColor) {\r\n                case COLOR_ORANGE:\r\n                    return new DirectiveBootstrap(flag);\r\n                case COLOR_BLUE:\r\n                    return new DirectiveNukeResponse(flag);\r\n            }\r\n            break;\r\n        // Resource directives =========================================================================================\r\n        case COLOR_YELLOW:\r\n            switch (flag.secondaryColor) {\r\n                case COLOR_YELLOW:\r\n                    return new DirectiveHarvest(flag);\r\n                case COLOR_CYAN:\r\n                    return new DirectiveExtract(flag);\r\n                case COLOR_BLUE:\r\n                    return new DirectiveHaul(flag);\r\n            }\r\n            break;\r\n        // Terminal state directives ===================================================================================\r\n        case COLOR_BROWN:\r\n            switch (flag.secondaryColor) {\r\n                case COLOR_RED:\r\n                    return new DirectiveTerminalEvacuateState(flag);\r\n                case COLOR_ORANGE:\r\n                    return new DirectiveTerminalEmergencyState(flag);\r\n                case COLOR_YELLOW:\r\n                    return new DirectiveTerminalRebuildState(flag);\r\n            }\r\n            break;\r\n        // Targeting colors ============================================================================================\r\n        case COLOR_GREY:\r\n            switch (flag.secondaryColor) {\r\n                case COLOR_ORANGE:\r\n                    return new DirectiveTargetSiege(flag);\r\n                case COLOR_YELLOW:\r\n                    return new DirectiveDismantle(flag);\r\n            }\r\n            break;\r\n        // Room planning directives ====================================================================================\r\n        case COLOR_WHITE:\r\n            switch (flag.secondaryColor) {\r\n                case COLOR_GREEN:\r\n                    return new DirectiveRPHatchery(flag);\r\n                case COLOR_BLUE:\r\n                    return new DirectiveRPCommandCenter(flag);\r\n                case COLOR_RED:\r\n                    return new DirectiveRPBunker(flag);\r\n            }\r\n            break;\r\n    }\r\n}\r\n","references":["C:/git/Overmind/src/directives/colony/clearRoom.ts","C:/git/Overmind/src/directives/colony/colonize.ts","C:/git/Overmind/src/directives/colony/incubate.ts","C:/git/Overmind/src/directives/colony/outpost.ts","C:/git/Overmind/src/directives/colony/outpostSK.ts","C:/git/Overmind/src/directives/defense/guard.ts","C:/git/Overmind/src/directives/defense/invasionDefense.ts","C:/git/Overmind/src/directives/defense/outpostDefense.ts","C:/git/Overmind/src/directives/Directive.ts","C:/git/Overmind/src/directives/offense/controllerAttack.ts","C:/git/Overmind/src/directives/offense/pairDestroy.ts","C:/git/Overmind/src/directives/offense/swarmDestroy.ts","C:/git/Overmind/src/directives/resource/extract.ts","C:/git/Overmind/src/directives/resource/harvest.ts","C:/git/Overmind/src/directives/resource/haul.ts","C:/git/Overmind/src/directives/roomPlanner/roomPlanner_bunker.ts","C:/git/Overmind/src/directives/roomPlanner/roomPlanner_commandCenter.ts","C:/git/Overmind/src/directives/roomPlanner/roomPlanner_hatchery.ts","C:/git/Overmind/src/directives/situational/bootstrap.ts","C:/git/Overmind/src/directives/situational/nukeResponse.ts","C:/git/Overmind/src/directives/targeting/dismantle.ts","C:/git/Overmind/src/directives/targeting/siegeTarget.ts","C:/git/Overmind/src/directives/terminalState/terminalState_emergency.ts","C:/git/Overmind/src/directives/terminalState/terminalState_evacuate.ts","C:/git/Overmind/src/directives/terminalState/terminalState_rebuild.ts"]}
