{"code":"// Reinstantiation of a task object from ProtoTask data\r\nimport { log } from '../console/log';\r\nimport profiler from '../profiler/screeps-profiler';\r\nimport { attackTaskName, TaskAttack } from './instances/attack';\r\nimport { buildTaskName, TaskBuild } from './instances/build';\r\nimport { claimTaskName, TaskClaim } from './instances/claim';\r\nimport { dismantleTaskName, TaskDismantle } from './instances/dismantle';\r\nimport { dropTaskName, TaskDrop } from './instances/drop';\r\nimport { fortifyTaskName, TaskFortify } from './instances/fortify';\r\nimport { getBoostedTaskName, TaskGetBoosted } from './instances/getBoosted';\r\nimport { getRenewedTaskName, TaskGetRenewed } from './instances/getRenewed';\r\nimport { goToTaskName } from './instances/goTo';\r\nimport { goToRoomTaskName, TaskGoToRoom } from './instances/goToRoom';\r\nimport { harvestTaskName, TaskHarvest } from './instances/harvest';\r\nimport { healTaskName, TaskHeal } from './instances/heal';\r\nimport { TaskInvalid } from './instances/invalid';\r\nimport { meleeAttackTaskName, TaskMeleeAttack } from './instances/meleeAttack';\r\nimport { pickupTaskName, TaskPickup } from './instances/pickup';\r\nimport { rangedAttackTaskName, TaskRangedAttack } from './instances/rangedAttack';\r\nimport { rechargeTaskName, TaskRecharge } from './instances/recharge';\r\nimport { repairTaskName, TaskRepair } from './instances/repair';\r\nimport { reserveTaskName, TaskReserve } from './instances/reserve';\r\nimport { signControllerTaskName, TaskSignController } from './instances/signController';\r\nimport { TaskTransfer, transferTaskName } from './instances/transfer';\r\n// import {fleeTargetType, fleeTaskName, TaskFlee} from './instances/flee';\r\nimport { TaskTransferAll, transferAllTaskName } from './instances/transferAll';\r\nimport { TaskUpgrade, upgradeTaskName } from './instances/upgrade';\r\nimport { TaskWithdraw, withdrawTaskName } from './instances/withdraw';\r\nimport { TaskWithdrawAll, withdrawAllTaskName } from './instances/withdrawAll';\r\n/**\r\n * The task initializer maps serialized prototasks to Task instances\r\n */\r\nexport function initializeTask(protoTask) {\r\n    // Retrieve name and target data from the ProtoTask\r\n    const taskName = protoTask.name;\r\n    const target = deref(protoTask._target.ref);\r\n    let task;\r\n    // Create a task object of the correct type\r\n    switch (taskName) {\r\n        case attackTaskName:\r\n            task = new TaskAttack(target);\r\n            break;\r\n        case buildTaskName:\r\n            task = new TaskBuild(target);\r\n            break;\r\n        case claimTaskName:\r\n            task = new TaskClaim(target);\r\n            break;\r\n        case dismantleTaskName:\r\n            task = new TaskDismantle(target);\r\n            break;\r\n        case dropTaskName:\r\n            task = new TaskDrop(derefRoomPosition(protoTask._target._pos));\r\n            break;\r\n        // case fleeTaskName:\r\n        // \ttask = new TaskFlee(derefRoomPosition(ProtoTask._target._pos) as fleeTargetType);\r\n        // \tbreak;\r\n        case fortifyTaskName:\r\n            task = new TaskFortify(target);\r\n            break;\r\n        case getBoostedTaskName:\r\n            task = new TaskGetBoosted(target, protoTask.data.resourceType);\r\n            break;\r\n        case getRenewedTaskName:\r\n            task = new TaskGetRenewed(target);\r\n            break;\r\n        case goToTaskName:\r\n            // task = new TaskGoTo(derefRoomPosition(ProtoTask._target._pos) as goToTargetType);\r\n            task = new TaskInvalid();\r\n            break;\r\n        case goToRoomTaskName:\r\n            task = new TaskGoToRoom(protoTask._target._pos.roomName);\r\n            break;\r\n        case harvestTaskName:\r\n            task = new TaskHarvest(target);\r\n            break;\r\n        case healTaskName:\r\n            task = new TaskHeal(target);\r\n            break;\r\n        case meleeAttackTaskName:\r\n            task = new TaskMeleeAttack(target);\r\n            break;\r\n        case pickupTaskName:\r\n            task = new TaskPickup(target);\r\n            break;\r\n        case rangedAttackTaskName:\r\n            task = new TaskRangedAttack(target);\r\n            break;\r\n        case rechargeTaskName:\r\n            task = new TaskRecharge(null);\r\n            break;\r\n        case repairTaskName:\r\n            task = new TaskRepair(target);\r\n            break;\r\n        case reserveTaskName:\r\n            task = new TaskReserve(target);\r\n            break;\r\n        case signControllerTaskName:\r\n            task = new TaskSignController(target);\r\n            break;\r\n        case transferTaskName:\r\n            task = new TaskTransfer(target);\r\n            break;\r\n        case transferAllTaskName:\r\n            task = new TaskTransferAll(target);\r\n            break;\r\n        case upgradeTaskName:\r\n            task = new TaskUpgrade(target);\r\n            break;\r\n        case withdrawTaskName:\r\n            task = new TaskWithdraw(target);\r\n            break;\r\n        case withdrawAllTaskName:\r\n            task = new TaskWithdrawAll(target);\r\n            break;\r\n        default:\r\n            log.error(`Invalid task name: ${taskName}! task.creep: ${protoTask._creep.name}. Deleting from memory!`);\r\n            task = new TaskInvalid();\r\n            break;\r\n    }\r\n    // Modify the task object to reflect any changed properties\r\n    task.proto = protoTask;\r\n    // Return it\r\n    return task;\r\n}\r\nprofiler.registerFN(initializeTask, 'initializeTask');\r\n","references":["C:/git/Overmind/src/console/log.ts","C:/git/Overmind/src/profiler/screeps-profiler.js","C:/git/Overmind/src/tasks/instances/attack.ts","C:/git/Overmind/src/tasks/instances/build.ts","C:/git/Overmind/src/tasks/instances/claim.ts","C:/git/Overmind/src/tasks/instances/dismantle.ts","C:/git/Overmind/src/tasks/instances/drop.ts","C:/git/Overmind/src/tasks/instances/fortify.ts","C:/git/Overmind/src/tasks/instances/getBoosted.ts","C:/git/Overmind/src/tasks/instances/getRenewed.ts","C:/git/Overmind/src/tasks/instances/goTo.ts","C:/git/Overmind/src/tasks/instances/goToRoom.ts","C:/git/Overmind/src/tasks/instances/harvest.ts","C:/git/Overmind/src/tasks/instances/heal.ts","C:/git/Overmind/src/tasks/instances/invalid.ts","C:/git/Overmind/src/tasks/instances/meleeAttack.ts","C:/git/Overmind/src/tasks/instances/pickup.ts","C:/git/Overmind/src/tasks/instances/rangedAttack.ts","C:/git/Overmind/src/tasks/instances/recharge.ts","C:/git/Overmind/src/tasks/instances/repair.ts","C:/git/Overmind/src/tasks/instances/reserve.ts","C:/git/Overmind/src/tasks/instances/signController.ts","C:/git/Overmind/src/tasks/instances/transfer.ts","C:/git/Overmind/src/tasks/instances/transferAll.ts","C:/git/Overmind/src/tasks/instances/upgrade.ts","C:/git/Overmind/src/tasks/instances/withdraw.ts","C:/git/Overmind/src/tasks/instances/withdrawAll.ts","C:/git/Overmind/src/tasks/Task.ts"]}
