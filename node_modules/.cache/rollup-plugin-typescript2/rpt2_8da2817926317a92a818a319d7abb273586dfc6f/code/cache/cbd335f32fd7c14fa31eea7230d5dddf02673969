{"code":"import * as tslib_1 from \"tslib\";\r\nimport { log } from '../../console/log';\r\nimport { ClaimingOverlord } from '../../overlords/colonization/claimer';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { Cartographer, ROOMTYPE_CONTROLLER } from '../../utilities/Cartographer';\r\nimport { printRoomName } from '../../utilities/utils';\r\nimport { MY_USERNAME } from '../../~settings';\r\nimport { Directive } from '../Directive';\r\n/**\r\n * Claims a new room, destroys all structures in the room, then unclaims it\r\n */\r\nlet DirectiveClearRoom = class DirectiveClearRoom extends Directive {\r\n    constructor(flag) {\r\n        super(flag, colony => colony.level >= 3);\r\n        // Remove if misplaced\r\n        if (Cartographer.roomType(this.pos.roomName) != ROOMTYPE_CONTROLLER) {\r\n            log.warning(`${this.print}: ${printRoomName(this.pos.roomName)} is not a controller room; ` +\r\n                `removing directive!`);\r\n            this.remove(true);\r\n        }\r\n    }\r\n    spawnMoarOverlords() {\r\n        this.overlords.claim = new ClaimingOverlord(this);\r\n    }\r\n    init() {\r\n        this.alert(`Clearing out room`);\r\n    }\r\n    removeAllStructures() {\r\n        const keepStorageStructures = this.memory.keepStorageStructures !== undefined\r\n            ? this.memory.keepStorageStructures : true;\r\n        const keepRoads = this.memory.keepRoads !== undefined ? this.memory.keepRoads : true;\r\n        const keepContainers = this.memory.keepContainers !== undefined ? this.memory.keepContainers : true;\r\n        if (this.room) {\r\n            const allStructures = this.room.find(FIND_STRUCTURES);\r\n            let i = 0;\r\n            for (const s of allStructures) {\r\n                if (s.structureType == STRUCTURE_CONTROLLER)\r\n                    continue;\r\n                if (keepStorageStructures &&\r\n                    (s.structureType == STRUCTURE_STORAGE || s.structureType == STRUCTURE_TERMINAL)) {\r\n                    continue;\r\n                }\r\n                if (keepRoads && s.structureType == STRUCTURE_ROAD) {\r\n                    continue;\r\n                }\r\n                if (keepContainers && s.structureType == STRUCTURE_CONTAINER) {\r\n                    continue;\r\n                }\r\n                const result = s.destroy();\r\n                if (result == OK) {\r\n                    i++;\r\n                }\r\n            }\r\n            log.alert(`Destroyed ${i} structures in ${this.room.print}.`);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    run() {\r\n        // Remove if structures are done\r\n        if (this.room && this.room.my) {\r\n            const done = this.removeAllStructures();\r\n            if (done) {\r\n                this.room.controller.unclaim();\r\n                log.notify(`Removing clearRoom directive in ${this.pos.roomName}: operation completed.`);\r\n                this.remove();\r\n            }\r\n        }\r\n        // Remove if owned by other player\r\n        if (Game.time % 10 == 2 && this.room && !!this.room.owner && this.room.owner != MY_USERNAME) {\r\n            log.notify(`Removing clearRoom directive in ${this.pos.roomName}: room already owned by another player.`);\r\n            this.remove();\r\n        }\r\n    }\r\n};\r\nDirectiveClearRoom.directiveName = 'clearRoom';\r\nDirectiveClearRoom.color = COLOR_PURPLE;\r\nDirectiveClearRoom.secondaryColor = COLOR_ORANGE;\r\nDirectiveClearRoom = tslib_1.__decorate([\r\n    profile\r\n], DirectiveClearRoom);\r\nexport { DirectiveClearRoom };\r\n","references":["C:/git/Overmind/src/console/log.ts","C:/git/Overmind/src/overlords/colonization/claimer.ts","C:/git/Overmind/src/profiler/decorator.ts","C:/git/Overmind/src/utilities/Cartographer.ts","C:/git/Overmind/src/utilities/utils.ts","C:/git/Overmind/src/~settings.ts","C:/git/Overmind/src/directives/Directive.ts"]}
