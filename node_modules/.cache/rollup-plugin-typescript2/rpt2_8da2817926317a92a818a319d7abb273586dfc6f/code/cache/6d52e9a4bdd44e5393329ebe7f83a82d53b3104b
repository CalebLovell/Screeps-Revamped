{"code":"import * as tslib_1 from \"tslib\";\r\nimport { $ } from '../../caching/GlobalCache';\r\nimport { Roles, Setups } from '../../creepSetups/setups';\r\nimport { Pathing } from '../../movement/Pathing';\r\nimport { OverlordPriority } from '../../priorities/priorities_overlords';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { Tasks } from '../../tasks/Tasks';\r\nimport { Overlord } from '../Overlord';\r\n/**\r\n * Claim an unowned room\r\n */\r\nlet ClaimingOverlord = class ClaimingOverlord extends Overlord {\r\n    constructor(directive, priority = OverlordPriority.colonization.claim) {\r\n        super(directive, 'claim', priority);\r\n        this.directive = directive;\r\n        this.claimers = this.zerg(Roles.claim);\r\n    }\r\n    init() {\r\n        const amount = $.number(this, 'claimerAmount', () => {\r\n            if (this.room) { // if you have vision\r\n                if (this.room.my) { // already claimed\r\n                    return 0;\r\n                }\r\n                else { // don't ask for claimers if you can't reach controller\r\n                    const pathablePos = this.room.creeps[0] ? this.room.creeps[0].pos\r\n                        : Pathing.findPathablePosition(this.room.name);\r\n                    if (!Pathing.isReachable(pathablePos, this.room.controller.pos, _.filter(this.room.structures, s => !s.isWalkable))) {\r\n                        return 0;\r\n                    }\r\n                }\r\n            }\r\n            return 1; // otherwise ask for 1 claimer\r\n        });\r\n        this.wishlist(amount, Setups.infestors.claim);\r\n    }\r\n    handleClaimer(claimer) {\r\n        if (claimer.room == this.room && !claimer.pos.isEdge) {\r\n            if (!this.room.controller.signedByMe) {\r\n                // Takes care of an edge case where planned newbie zone signs prevents signing until room is reserved\r\n                if (!this.room.my && this.room.controller.signedByScreeps) {\r\n                    claimer.task = Tasks.claim(this.room.controller);\r\n                }\r\n                else {\r\n                    claimer.task = Tasks.signController(this.room.controller);\r\n                }\r\n            }\r\n            else {\r\n                claimer.task = Tasks.claim(this.room.controller);\r\n            }\r\n        }\r\n        else {\r\n            claimer.goTo(this.pos, { ensurePath: true, avoidSK: true, waypoints: this.directive.waypoints });\r\n        }\r\n    }\r\n    run() {\r\n        this.autoRun(this.claimers, claimer => this.handleClaimer(claimer));\r\n    }\r\n};\r\nClaimingOverlord = tslib_1.__decorate([\r\n    profile\r\n], ClaimingOverlord);\r\nexport { ClaimingOverlord };\r\n","references":["C:/git/Overmind/src/caching/GlobalCache.ts","C:/git/Overmind/src/creepSetups/setups.ts","C:/git/Overmind/src/directives/Directive.ts","C:/git/Overmind/src/movement/Pathing.ts","C:/git/Overmind/src/priorities/priorities_overlords.ts","C:/git/Overmind/src/profiler/decorator.ts","C:/git/Overmind/src/tasks/Tasks.ts","C:/git/Overmind/src/zerg/Zerg.ts","C:/git/Overmind/src/overlords/Overlord.ts"]}
