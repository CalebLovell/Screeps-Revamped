{"code":"import * as tslib_1 from \"tslib\";\r\nimport { log } from '../../console/log';\r\nimport { ControllerAttackerOverlord } from '../../overlords/offense/controllerAttacker';\r\nimport { StationaryScoutOverlord } from '../../overlords/scouting/stationary';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { Directive } from '../Directive';\r\n/**\r\n * Attack a controller, downgrading it to level 0\r\n */\r\nlet DirectiveControllerAttack = class DirectiveControllerAttack extends Directive {\r\n    constructor(flag) {\r\n        super(flag);\r\n    }\r\n    spawnMoarOverlords() {\r\n        this.overlords.scout = new StationaryScoutOverlord(this); // TODO: Not have a scout at all times\r\n        this.overlords.controllerAttack = new ControllerAttackerOverlord(this);\r\n    }\r\n    init() {\r\n        const level = this.room && this.room.controller ? this.room.controller.level.toString() : '???';\r\n        this.alert(`Downgrading controller (RCL${level})`);\r\n    }\r\n    run() {\r\n        if (this.room && this.room.controller && this.room.controller.level == 0) {\r\n            log.notify(`Removing ${this.name} since controller has reached level 0.`);\r\n            this.remove();\r\n        }\r\n    }\r\n};\r\nDirectiveControllerAttack.directiveName = 'controllerAttack';\r\nDirectiveControllerAttack.color = COLOR_RED;\r\nDirectiveControllerAttack.secondaryColor = COLOR_PURPLE;\r\nDirectiveControllerAttack = tslib_1.__decorate([\r\n    profile\r\n], DirectiveControllerAttack);\r\nexport { DirectiveControllerAttack };\r\n","references":["C:/git/Overmind/src/console/log.ts","C:/git/Overmind/src/overlords/offense/controllerAttacker.ts","C:/git/Overmind/src/overlords/scouting/stationary.ts","C:/git/Overmind/src/profiler/decorator.ts","C:/git/Overmind/src/directives/Directive.ts"]}
