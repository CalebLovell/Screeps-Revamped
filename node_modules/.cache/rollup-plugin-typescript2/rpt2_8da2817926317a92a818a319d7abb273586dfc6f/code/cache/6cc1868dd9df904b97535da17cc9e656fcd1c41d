{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Roles, Setups } from '../../creepSetups/setups';\r\nimport { RoomIntel } from '../../intel/RoomIntel';\r\nimport { OverlordPriority } from '../../priorities/priorities_overlords';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { Tasks } from '../../tasks/Tasks';\r\nimport { MY_USERNAME } from '../../~settings';\r\nimport { Overlord } from '../Overlord';\r\n/**\r\n * Spawns reservers to reserve an outpost room\r\n */\r\nlet ReservingOverlord = class ReservingOverlord extends Overlord {\r\n    constructor(directive, priority = OverlordPriority.remoteRoom.reserve) {\r\n        super(directive, 'reserve', priority);\r\n        // Change priority to operate per-outpost\r\n        this.priority += this.outpostIndex * OverlordPriority.remoteRoom.roomIncrement;\r\n        this.reserveBuffer = 2000;\r\n        this.reservers = this.zerg(Roles.claim);\r\n    }\r\n    init() {\r\n        let amount = 0;\r\n        if (this.room) {\r\n            if (this.room.controller.needsReserving(this.reserveBuffer)) {\r\n                amount = 1;\r\n            }\r\n        }\r\n        else if (RoomIntel.roomReservedBy(this.pos.roomName) == MY_USERNAME &&\r\n            RoomIntel.roomReservationRemaining(this.pos.roomName) < 1000) {\r\n            amount = 1;\r\n        }\r\n        this.wishlist(amount, Setups.infestors.reserve);\r\n    }\r\n    handleReserver(reserver) {\r\n        if (reserver.room == this.room && !reserver.pos.isEdge) {\r\n            // If reserver is in the room and not on exit tile\r\n            if (!this.room.controller.signedByMe) {\r\n                // Takes care of an edge case where planned newbie zone signs prevents signing until room is reserved\r\n                if (!this.room.my && this.room.controller.signedByScreeps) {\r\n                    reserver.task = Tasks.reserve(this.room.controller);\r\n                }\r\n                else {\r\n                    reserver.task = Tasks.signController(this.room.controller);\r\n                }\r\n            }\r\n            else {\r\n                reserver.task = Tasks.reserve(this.room.controller);\r\n            }\r\n        }\r\n        else {\r\n            // reserver.task = Tasks.goTo(this.pos);\r\n            reserver.goTo(this.pos);\r\n        }\r\n    }\r\n    run() {\r\n        this.autoRun(this.reservers, reserver => this.handleReserver(reserver));\r\n    }\r\n};\r\nReservingOverlord = tslib_1.__decorate([\r\n    profile\r\n], ReservingOverlord);\r\nexport { ReservingOverlord };\r\n","references":["C:/git/Overmind/src/creepSetups/setups.ts","C:/git/Overmind/src/directives/colony/outpost.ts","C:/git/Overmind/src/intel/RoomIntel.ts","C:/git/Overmind/src/priorities/priorities_overlords.ts","C:/git/Overmind/src/profiler/decorator.ts","C:/git/Overmind/src/tasks/Tasks.ts","C:/git/Overmind/src/zerg/Zerg.ts","C:/git/Overmind/src/~settings.ts","C:/git/Overmind/src/overlords/Overlord.ts"]}
