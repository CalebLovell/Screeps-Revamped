{"code":"// All structure prototypes\r\n// General structure prototypes ========================================================================================\r\nimport { MY_USERNAME } from '../~settings';\r\nObject.defineProperty(Structure.prototype, 'isWalkable', {\r\n    get() {\r\n        return this.structureType == STRUCTURE_ROAD ||\r\n            this.structureType == STRUCTURE_CONTAINER ||\r\n            (this.structureType == STRUCTURE_RAMPART && (this.my ||\r\n                this.isPublic));\r\n    },\r\n    configurable: true,\r\n});\r\n// Container prototypes ================================================================================================\r\nObject.defineProperty(StructureContainer.prototype, 'energy', {\r\n    get() {\r\n        return this.store[RESOURCE_ENERGY];\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(StructureContainer.prototype, 'isFull', {\r\n    get() {\r\n        return _.sum(this.store) >= this.storeCapacity;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(StructureContainer.prototype, 'isEmpty', {\r\n    get() {\r\n        return _.sum(this.store) == 0;\r\n    },\r\n    configurable: true,\r\n});\r\n// Controller prototypes ===============================================================================================\r\nObject.defineProperty(StructureController.prototype, 'reservedByMe', {\r\n    get: function () {\r\n        return this.reservation && this.reservation.username == MY_USERNAME;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(StructureController.prototype, 'signedByMe', {\r\n    get: function () {\r\n        return this.sign && this.sign.text == Memory.settings.signature && Game.time - this.sign.time < 250000;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(StructureController.prototype, 'signedByScreeps', {\r\n    get: function () {\r\n        return this.sign && this.sign.username == 'Screeps';\r\n    },\r\n    configurable: true,\r\n});\r\nStructureController.prototype.needsReserving = function (reserveBuffer) {\r\n    return !this.reservation || (this.reservedByMe && this.reservation.ticksToEnd < reserveBuffer);\r\n};\r\n// Extension prototypes ================================================================================================\r\nObject.defineProperty(StructureExtension.prototype, 'isFull', {\r\n    get() {\r\n        return this.energy >= this.energyCapacity;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(StructureExtension.prototype, 'isEmpty', {\r\n    get() {\r\n        return this.energy == 0;\r\n    },\r\n    configurable: true,\r\n});\r\n// Link prototypes =====================================================================================================\r\nObject.defineProperty(StructureLink.prototype, 'isFull', {\r\n    get() {\r\n        return this.energy >= this.energyCapacity;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(StructureLink.prototype, 'isEmpty', {\r\n    get() {\r\n        return this.energy == 0;\r\n    },\r\n    configurable: true,\r\n});\r\n// Nuker prototypes ====================================================================================================\r\n// PowerSpawn prototypes ===============================================================================================\r\n// Spawn prototypes ====================================================================================================\r\nObject.defineProperty(StructureSpawn.prototype, 'isFull', {\r\n    get() {\r\n        return this.energy >= this.energyCapacity;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(StructureSpawn.prototype, 'isEmpty', {\r\n    get() {\r\n        return this.energy == 0;\r\n    },\r\n    configurable: true,\r\n});\r\n// Storage prototypes ==================================================================================================\r\nObject.defineProperty(StructureStorage.prototype, 'energy', {\r\n    get() {\r\n        return this.store[RESOURCE_ENERGY];\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(StructureStorage.prototype, 'isFull', {\r\n    get() {\r\n        return _.sum(this.store) >= this.storeCapacity;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(StructureStorage.prototype, 'isEmpty', {\r\n    get() {\r\n        return _.sum(this.store) == 0;\r\n    },\r\n    configurable: true,\r\n});\r\n// Terminal prototypes =================================================================================================\r\nObject.defineProperty(StructureTerminal.prototype, 'energy', {\r\n    get() {\r\n        return this.store[RESOURCE_ENERGY];\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(StructureTerminal.prototype, 'isFull', {\r\n    get() {\r\n        return _.sum(this.store) >= this.storeCapacity;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(StructureTerminal.prototype, 'isEmpty', {\r\n    get() {\r\n        return _.sum(this.store) == 0;\r\n    },\r\n    configurable: true,\r\n});\r\n// StructureTerminal.prototype._send = StructureTerminal.prototype.send;\r\n// StructureTerminal.prototype.send = function(resourceType: ResourceConstant, amount: number, destination: string,\r\n// \t\t\t\t\t\t\t\t\t\t\tdescription?: string): ScreepsReturnCode {\r\n// \t// Log stats\r\n// \tlet origin = this.room.name;\r\n// \tlet response = this._send(resourceType, amount, destination, description);\r\n// \tif (response == OK) {\r\n// \t\tTerminalNetwork.logTransfer(resourceType,amount,origin, destination)\r\n// \t}\r\n// \treturn response;\r\n// };\r\n// Tower prototypes\r\nObject.defineProperty(StructureTower.prototype, 'isFull', {\r\n    get() {\r\n        return this.energy >= this.energyCapacity;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(StructureTower.prototype, 'isEmpty', {\r\n    get() {\r\n        return this.energy == 0;\r\n    },\r\n    configurable: true,\r\n});\r\n// Tombstone prototypes ================================================================================================\r\nObject.defineProperty(Tombstone.prototype, 'energy', {\r\n    get() {\r\n        return this.store[RESOURCE_ENERGY];\r\n    },\r\n    configurable: true,\r\n});\r\n","references":["C:/git/Overmind/src/~settings.ts"]}
