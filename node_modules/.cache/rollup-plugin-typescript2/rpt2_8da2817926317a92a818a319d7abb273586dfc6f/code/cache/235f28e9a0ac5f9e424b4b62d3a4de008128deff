{"code":"\"use strict\";\r\nRoomVisual.prototype.infoBox = function (info, x, y, opts = {}) {\r\n    _.defaults(opts, {\r\n        color: colors.infoBoxGood,\r\n        textstyle: false,\r\n        textsize: speechSize,\r\n        textfont: 'verdana',\r\n        opacity: 0.7,\r\n    });\r\n    let fontstring = '';\r\n    if (opts.textstyle) {\r\n        fontstring = opts.textstyle + ' ';\r\n    }\r\n    fontstring += opts.textsize + ' ' + opts.textfont;\r\n    let pointer = [\r\n        [.9, -0.25],\r\n        [.9, 0.25],\r\n        [0.3, 0.0],\r\n    ];\r\n    pointer = relPoly(x, y, pointer);\r\n    pointer.push(pointer[0]);\r\n    // Draw arrow\r\n    this.poly(pointer, {\r\n        fill: undefined,\r\n        stroke: opts.color,\r\n        opacity: opts.opacity,\r\n        strokeWidth: 0.0\r\n    });\r\n    // // Draw box\r\n    // this.rect(x + 0.9, y - 0.8 * opts.textsize,\r\n    // \t0.55 * opts.textsize * _.max(_.map(info, line => line.length)), info.length * opts.textsize,\r\n    // \t{\r\n    // \t\tfill   : undefined,\r\n    // \t\topacity: opts.opacity\r\n    // \t});\r\n    // Draw vertical bar\r\n    const x0 = x + 0.9;\r\n    const y0 = y - 0.8 * opts.textsize;\r\n    this.line(x0, y0, x0, y0 + info.length * opts.textsize, {\r\n        color: opts.color,\r\n    });\r\n    // Draw text\r\n    let dy = 0;\r\n    for (const line of info) {\r\n        this.text(line, x + 1, y + dy, {\r\n            color: opts.color,\r\n            // backgroundColor  : opts.background,\r\n            backgroundPadding: 0.1,\r\n            opacity: opts.opacity,\r\n            font: fontstring,\r\n            align: 'left',\r\n        });\r\n        dy += opts.textsize;\r\n    }\r\n    return this;\r\n};\r\nRoomVisual.prototype.multitext = function (textLines, x, y, opts = {}) {\r\n    _.defaults(opts, {\r\n        color: colors.infoBoxGood,\r\n        textstyle: false,\r\n        textsize: speechSize,\r\n        textfont: 'verdana',\r\n        opacity: 0.7,\r\n    });\r\n    let fontstring = '';\r\n    if (opts.textstyle) {\r\n        fontstring = opts.textstyle + ' ';\r\n    }\r\n    fontstring += opts.textsize + ' ' + opts.textfont;\r\n    // // Draw vertical bar\r\n    // let x0 = x + 0.9;\r\n    // let y0 = y - 0.8 * opts.textsize;\r\n    // this.line(x0, y0, x0, y0 + textLines.length * opts.textsize, {\r\n    // \tcolor: opts.color,\r\n    // });\r\n    // Draw text\r\n    let dy = 0;\r\n    for (const line of textLines) {\r\n        this.text(line, x, y + dy, {\r\n            color: opts.color,\r\n            // backgroundColor  : opts.background,\r\n            backgroundPadding: 0.1,\r\n            opacity: opts.opacity,\r\n            font: fontstring,\r\n            align: 'left',\r\n        });\r\n        dy += opts.textsize;\r\n    }\r\n    return this;\r\n};\r\nRoomVisual.prototype.box = function (x, y, w, h, style) {\r\n    return this.line(x, y, x + w, y, style)\r\n        .line(x + w, y, x + w, y + h, style)\r\n        .line(x + w, y + h, x, y + h, style)\r\n        .line(x, y + h, x, y, style);\r\n};\r\n// Taken from https://github.com/screepers/RoomVisual with slight modification: ========================================\r\nconst colors = {\r\n    gray: '#555555',\r\n    light: '#AAAAAA',\r\n    road: '#666',\r\n    energy: '#FFE87B',\r\n    power: '#F53547',\r\n    dark: '#181818',\r\n    outline: '#8FBB93',\r\n    speechText: '#000000',\r\n    speechBackground: '#aebcc4',\r\n    infoBoxGood: '#09ff00',\r\n    infoBoxBad: '#ff2600'\r\n};\r\nconst speechSize = 0.5;\r\nconst speechFont = 'Times New Roman';\r\nRoomVisual.prototype.structure = function (x, y, type, opts = {}) {\r\n    _.defaults(opts, { opacity: 0.5 });\r\n    switch (type) {\r\n        case STRUCTURE_EXTENSION:\r\n            this.circle(x, y, {\r\n                radius: 0.5,\r\n                fill: colors.dark,\r\n                stroke: colors.outline,\r\n                strokeWidth: 0.05,\r\n                opacity: opts.opacity\r\n            });\r\n            this.circle(x, y, {\r\n                radius: 0.35,\r\n                fill: colors.gray,\r\n                opacity: opts.opacity\r\n            });\r\n            break;\r\n        case STRUCTURE_SPAWN:\r\n            this.circle(x, y, {\r\n                radius: 0.65,\r\n                fill: colors.dark,\r\n                stroke: '#CCCCCC',\r\n                strokeWidth: 0.10,\r\n                opacity: opts.opacity\r\n            });\r\n            this.circle(x, y, {\r\n                radius: 0.40,\r\n                fill: colors.energy,\r\n                opacity: opts.opacity\r\n            });\r\n            break;\r\n        case STRUCTURE_POWER_SPAWN:\r\n            this.circle(x, y, {\r\n                radius: 0.65,\r\n                fill: colors.dark,\r\n                stroke: colors.power,\r\n                strokeWidth: 0.10,\r\n                opacity: opts.opacity\r\n            });\r\n            this.circle(x, y, {\r\n                radius: 0.40,\r\n                fill: colors.energy,\r\n                opacity: opts.opacity\r\n            });\r\n            break;\r\n        case STRUCTURE_LINK: {\r\n            // let osize = 0.3;\r\n            // let isize = 0.2;\r\n            let outer = [\r\n                [0.0, -0.5],\r\n                [0.4, 0.0],\r\n                [0.0, 0.5],\r\n                [-0.4, 0.0]\r\n            ];\r\n            let inner = [\r\n                [0.0, -0.3],\r\n                [0.25, 0.0],\r\n                [0.0, 0.3],\r\n                [-0.25, 0.0]\r\n            ];\r\n            outer = relPoly(x, y, outer);\r\n            inner = relPoly(x, y, inner);\r\n            outer.push(outer[0]);\r\n            inner.push(inner[0]);\r\n            this.poly(outer, {\r\n                fill: colors.dark,\r\n                stroke: colors.outline,\r\n                strokeWidth: 0.05,\r\n                opacity: opts.opacity\r\n            });\r\n            this.poly(inner, {\r\n                fill: colors.gray,\r\n                stroke: false,\r\n                opacity: opts.opacity\r\n            });\r\n            break;\r\n        }\r\n        case STRUCTURE_TERMINAL: {\r\n            let outer = [\r\n                [0.0, -0.8],\r\n                [0.55, -0.55],\r\n                [0.8, 0.0],\r\n                [0.55, 0.55],\r\n                [0.0, 0.8],\r\n                [-0.55, 0.55],\r\n                [-0.8, 0.0],\r\n                [-0.55, -0.55],\r\n            ];\r\n            let inner = [\r\n                [0.0, -0.65],\r\n                [0.45, -0.45],\r\n                [0.65, 0.0],\r\n                [0.45, 0.45],\r\n                [0.0, 0.65],\r\n                [-0.45, 0.45],\r\n                [-0.65, 0.0],\r\n                [-0.45, -0.45],\r\n            ];\r\n            outer = relPoly(x, y, outer);\r\n            inner = relPoly(x, y, inner);\r\n            outer.push(outer[0]);\r\n            inner.push(inner[0]);\r\n            this.poly(outer, {\r\n                fill: colors.dark,\r\n                stroke: colors.outline,\r\n                strokeWidth: 0.05,\r\n                opacity: opts.opacity\r\n            });\r\n            this.poly(inner, {\r\n                fill: colors.light,\r\n                stroke: false,\r\n                opacity: opts.opacity\r\n            });\r\n            this.rect(x - 0.45, y - 0.45, 0.9, 0.9, {\r\n                fill: colors.gray,\r\n                stroke: colors.dark,\r\n                strokeWidth: 0.1,\r\n                opacity: opts.opacity\r\n            });\r\n            break;\r\n        }\r\n        case STRUCTURE_LAB:\r\n            this.circle(x, y - 0.025, {\r\n                radius: 0.55,\r\n                fill: colors.dark,\r\n                stroke: colors.outline,\r\n                strokeWidth: 0.05,\r\n                opacity: opts.opacity\r\n            });\r\n            this.circle(x, y - 0.025, {\r\n                radius: 0.40,\r\n                fill: colors.gray,\r\n                opacity: opts.opacity\r\n            });\r\n            this.rect(x - 0.45, y + 0.3, 0.9, 0.25, {\r\n                fill: colors.dark,\r\n                stroke: false,\r\n                opacity: opts.opacity\r\n            });\r\n            {\r\n                let box = [\r\n                    [-0.45, 0.3],\r\n                    [-0.45, 0.55],\r\n                    [0.45, 0.55],\r\n                    [0.45, 0.3],\r\n                ];\r\n                box = relPoly(x, y, box);\r\n                this.poly(box, {\r\n                    stroke: colors.outline,\r\n                    strokeWidth: 0.05,\r\n                    opacity: opts.opacity\r\n                });\r\n            }\r\n            break;\r\n        case STRUCTURE_TOWER:\r\n            this.circle(x, y, {\r\n                radius: 0.6,\r\n                fill: colors.dark,\r\n                stroke: colors.outline,\r\n                strokeWidth: 0.05,\r\n                opacity: opts.opacity\r\n            });\r\n            this.rect(x - 0.4, y - 0.3, 0.8, 0.6, {\r\n                fill: colors.gray,\r\n                opacity: opts.opacity\r\n            });\r\n            this.rect(x - 0.2, y - 0.9, 0.4, 0.5, {\r\n                fill: colors.light,\r\n                stroke: colors.dark,\r\n                strokeWidth: 0.07,\r\n                opacity: opts.opacity\r\n            });\r\n            break;\r\n        case STRUCTURE_ROAD:\r\n            this.circle(x, y, {\r\n                radius: 0.175,\r\n                fill: colors.road,\r\n                stroke: false,\r\n                opacity: opts.opacity\r\n            });\r\n            if (!this.roads)\r\n                this.roads = [];\r\n            this.roads.push([x, y]);\r\n            break;\r\n        case STRUCTURE_RAMPART:\r\n            this.circle(x, y, {\r\n                radius: 0.65,\r\n                fill: '#434C43',\r\n                stroke: '#5D735F',\r\n                strokeWidth: 0.10,\r\n                opacity: opts.opacity\r\n            });\r\n            break;\r\n        case STRUCTURE_WALL:\r\n            this.circle(x, y, {\r\n                radius: 0.40,\r\n                fill: colors.dark,\r\n                stroke: colors.light,\r\n                strokeWidth: 0.05,\r\n                opacity: opts.opacity\r\n            });\r\n            break;\r\n        case STRUCTURE_STORAGE:\r\n            const storageOutline = relPoly(x, y, [\r\n                [-0.45, -0.55],\r\n                [0, -0.65],\r\n                [0.45, -0.55],\r\n                [0.55, 0],\r\n                [0.45, 0.55],\r\n                [0, 0.65],\r\n                [-0.45, 0.55],\r\n                [-0.55, 0],\r\n                [-0.45, -0.55],\r\n            ]);\r\n            this.poly(storageOutline, {\r\n                stroke: colors.outline,\r\n                strokeWidth: 0.05,\r\n                fill: colors.dark,\r\n                opacity: opts.opacity\r\n            });\r\n            this.rect(x - 0.35, y - 0.45, 0.7, 0.9, {\r\n                fill: colors.energy,\r\n                opacity: opts.opacity,\r\n            });\r\n            break;\r\n        case STRUCTURE_OBSERVER:\r\n            this.circle(x, y, {\r\n                fill: colors.dark,\r\n                radius: 0.45,\r\n                stroke: colors.outline,\r\n                strokeWidth: 0.05,\r\n                opacity: opts.opacity\r\n            });\r\n            this.circle(x + 0.225, y, {\r\n                fill: colors.outline,\r\n                radius: 0.20,\r\n                opacity: opts.opacity\r\n            });\r\n            break;\r\n        case STRUCTURE_NUKER:\r\n            let outline = [\r\n                [0, -1],\r\n                [-0.47, 0.2],\r\n                [-0.5, 0.5],\r\n                [0.5, 0.5],\r\n                [0.47, 0.2],\r\n                [0, -1],\r\n            ];\r\n            outline = relPoly(x, y, outline);\r\n            this.poly(outline, {\r\n                stroke: colors.outline,\r\n                strokeWidth: 0.05,\r\n                fill: colors.dark,\r\n                opacity: opts.opacity\r\n            });\r\n            let inline = [\r\n                [0, -.80],\r\n                [-0.40, 0.2],\r\n                [0.40, 0.2],\r\n                [0, -.80],\r\n            ];\r\n            inline = relPoly(x, y, inline);\r\n            this.poly(inline, {\r\n                stroke: colors.outline,\r\n                strokeWidth: 0.01,\r\n                fill: colors.gray,\r\n                opacity: opts.opacity\r\n            });\r\n            break;\r\n        case STRUCTURE_CONTAINER:\r\n            this.rect(x - 0.225, y - 0.3, 0.45, 0.6, {\r\n                fill: 'yellow',\r\n                opacity: opts.opacity,\r\n                stroke: colors.dark,\r\n                strokeWidth: 0.10,\r\n            });\r\n            break;\r\n        default:\r\n            this.circle(x, y, {\r\n                fill: colors.light,\r\n                radius: 0.35,\r\n                stroke: colors.dark,\r\n                strokeWidth: 0.20,\r\n                opacity: opts.opacity\r\n            });\r\n            break;\r\n    }\r\n    return this;\r\n};\r\nconst dirs = [\r\n    [],\r\n    [0, -1],\r\n    [1, -1],\r\n    [1, 0],\r\n    [1, 1],\r\n    [0, 1],\r\n    [-1, 1],\r\n    [-1, 0],\r\n    [-1, -1]\r\n];\r\nRoomVisual.prototype.connectRoads = function (opts = {}) {\r\n    _.defaults(opts, { opacity: 0.5 });\r\n    const color = opts.color || colors.road || 'white';\r\n    if (!this.roads)\r\n        return;\r\n    // this.text(this.roads.map(r=>r.join(',')).join(' '),25,23)\r\n    this.roads.forEach((r) => {\r\n        // this.text(`${r[0]},${r[1]}`,r[0],r[1],{ size: 0.2 })\r\n        for (let i = 1; i <= 4; i++) {\r\n            const d = dirs[i];\r\n            const c = [r[0] + d[0], r[1] + d[1]];\r\n            const rd = _.some(this.roads, r => r[0] == c[0] && r[1] == c[1]);\r\n            // this.text(`${c[0]},${c[1]}`,c[0],c[1],{ size: 0.2, color: rd?'green':'red' })\r\n            if (rd) {\r\n                this.line(r[0], r[1], c[0], c[1], {\r\n                    color: color,\r\n                    width: 0.35,\r\n                    opacity: opts.opacity\r\n                });\r\n            }\r\n        }\r\n    });\r\n    return this;\r\n};\r\nRoomVisual.prototype.speech = function (text, x, y, opts = {}) {\r\n    const background = !!opts.background ? opts.background : colors.speechBackground;\r\n    const textcolor = !!opts.textcolor ? opts.textcolor : colors.speechText;\r\n    // noinspection PointlessBooleanExpressionJS\r\n    const textstyle = !!opts.textstyle ? opts.textstyle : false;\r\n    const textsize = !!opts.textsize ? opts.textsize : speechSize;\r\n    const textfont = !!opts.textfont ? opts.textfont : speechFont;\r\n    const opacity = !!opts.opacity ? opts.opacity : 1;\r\n    let fontstring = '';\r\n    if (textstyle) {\r\n        fontstring = textstyle + ' ';\r\n    }\r\n    fontstring += textsize + ' ' + textfont;\r\n    let pointer = [\r\n        [-0.2, -0.8],\r\n        [0.2, -0.8],\r\n        [0, -0.3]\r\n    ];\r\n    pointer = relPoly(x, y, pointer);\r\n    pointer.push(pointer[0]);\r\n    this.poly(pointer, {\r\n        fill: background,\r\n        stroke: background,\r\n        opacity: opacity,\r\n        strokeWidth: 0.0\r\n    });\r\n    this.text(text, x, y - 1, {\r\n        color: textcolor,\r\n        backgroundColor: background,\r\n        backgroundPadding: 0.1,\r\n        opacity: opacity,\r\n        font: fontstring\r\n    });\r\n    return this;\r\n};\r\nRoomVisual.prototype.animatedPosition = function (x, y, opts = {}) {\r\n    const color = !!opts.color ? opts.color : 'blue';\r\n    const opacity = !!opts.opacity ? opts.opacity : 0.5;\r\n    let radius = !!opts.radius ? opts.radius : 0.75;\r\n    const frames = !!opts.frames ? opts.frames : 6;\r\n    const angle = (Game.time % frames * 90 / frames) * (Math.PI / 180);\r\n    const s = Math.sin(angle);\r\n    const c = Math.cos(angle);\r\n    const sizeMod = Math.abs(Game.time % frames - frames / 2) / 10;\r\n    radius += radius * sizeMod;\r\n    const points = [\r\n        rotate(0, -radius, s, c, x, y),\r\n        rotate(radius, 0, s, c, x, y),\r\n        rotate(0, radius, s, c, x, y),\r\n        rotate(-radius, 0, s, c, x, y),\r\n        rotate(0, -radius, s, c, x, y),\r\n    ];\r\n    this.poly(points, { stroke: color, opacity: opacity });\r\n    return this;\r\n};\r\nfunction rotate(x, y, s, c, px, py) {\r\n    const xDelta = x * c - y * s;\r\n    const yDelta = x * s + y * c;\r\n    return { x: px + xDelta, y: py + yDelta };\r\n}\r\nfunction relPoly(x, y, poly) {\r\n    return poly.map(p => {\r\n        p[0] += x;\r\n        p[1] += y;\r\n        return p;\r\n    });\r\n}\r\nRoomVisual.prototype.test = function () {\r\n    const demopos = [19, 24];\r\n    this.clear();\r\n    this.structure(demopos[0] + 0, demopos[1] + 0, STRUCTURE_LAB);\r\n    this.structure(demopos[0] + 1, demopos[1] + 1, STRUCTURE_TOWER);\r\n    this.structure(demopos[0] + 2, demopos[1] + 0, STRUCTURE_LINK);\r\n    this.structure(demopos[0] + 3, demopos[1] + 1, STRUCTURE_TERMINAL);\r\n    this.structure(demopos[0] + 4, demopos[1] + 0, STRUCTURE_EXTENSION);\r\n    this.structure(demopos[0] + 5, demopos[1] + 1, STRUCTURE_SPAWN);\r\n    this.animatedPosition(demopos[0] + 7, demopos[1]);\r\n    this.speech('This is a test!', demopos[0] + 10, demopos[1], { opacity: 0.7 });\r\n    // this.infoBox(['This is', 'a test', 'mmmmmmmmmmmmm'], demopos[0] + 15, demopos[1]);\r\n    return this;\r\n};\r\nconst ColorSets = {\r\n    white: ['#ffffff', '#4c4c4c'],\r\n    grey: ['#b4b4b4', '#4c4c4c'],\r\n    red: ['#ff7b7b', '#592121'],\r\n    yellow: ['#fdd388', '#5d4c2e'],\r\n    green: ['#00f4a2', '#236144'],\r\n    blue: ['#50d7f9', '#006181'],\r\n    purple: ['#a071ff', '#371383'],\r\n};\r\nconst ResourceColors = {\r\n    [RESOURCE_ENERGY]: ColorSets.yellow,\r\n    [RESOURCE_POWER]: ColorSets.red,\r\n    [RESOURCE_HYDROGEN]: ColorSets.grey,\r\n    [RESOURCE_OXYGEN]: ColorSets.grey,\r\n    [RESOURCE_UTRIUM]: ColorSets.blue,\r\n    [RESOURCE_LEMERGIUM]: ColorSets.green,\r\n    [RESOURCE_KEANIUM]: ColorSets.purple,\r\n    [RESOURCE_ZYNTHIUM]: ColorSets.yellow,\r\n    [RESOURCE_CATALYST]: ColorSets.red,\r\n    [RESOURCE_GHODIUM]: ColorSets.white,\r\n    [RESOURCE_HYDROXIDE]: ColorSets.grey,\r\n    [RESOURCE_ZYNTHIUM_KEANITE]: ColorSets.grey,\r\n    [RESOURCE_UTRIUM_LEMERGITE]: ColorSets.grey,\r\n    [RESOURCE_UTRIUM_HYDRIDE]: ColorSets.blue,\r\n    [RESOURCE_UTRIUM_OXIDE]: ColorSets.blue,\r\n    [RESOURCE_KEANIUM_HYDRIDE]: ColorSets.purple,\r\n    [RESOURCE_KEANIUM_OXIDE]: ColorSets.purple,\r\n    [RESOURCE_LEMERGIUM_HYDRIDE]: ColorSets.green,\r\n    [RESOURCE_LEMERGIUM_OXIDE]: ColorSets.green,\r\n    [RESOURCE_ZYNTHIUM_HYDRIDE]: ColorSets.yellow,\r\n    [RESOURCE_ZYNTHIUM_OXIDE]: ColorSets.yellow,\r\n    [RESOURCE_GHODIUM_HYDRIDE]: ColorSets.white,\r\n    [RESOURCE_GHODIUM_OXIDE]: ColorSets.white,\r\n    [RESOURCE_UTRIUM_ACID]: ColorSets.blue,\r\n    [RESOURCE_UTRIUM_ALKALIDE]: ColorSets.blue,\r\n    [RESOURCE_KEANIUM_ACID]: ColorSets.purple,\r\n    [RESOURCE_KEANIUM_ALKALIDE]: ColorSets.purple,\r\n    [RESOURCE_LEMERGIUM_ACID]: ColorSets.green,\r\n    [RESOURCE_LEMERGIUM_ALKALIDE]: ColorSets.green,\r\n    [RESOURCE_ZYNTHIUM_ACID]: ColorSets.yellow,\r\n    [RESOURCE_ZYNTHIUM_ALKALIDE]: ColorSets.yellow,\r\n    [RESOURCE_GHODIUM_ACID]: ColorSets.white,\r\n    [RESOURCE_GHODIUM_ALKALIDE]: ColorSets.white,\r\n    [RESOURCE_CATALYZED_UTRIUM_ACID]: ColorSets.blue,\r\n    [RESOURCE_CATALYZED_UTRIUM_ALKALIDE]: ColorSets.blue,\r\n    [RESOURCE_CATALYZED_KEANIUM_ACID]: ColorSets.purple,\r\n    [RESOURCE_CATALYZED_KEANIUM_ALKALIDE]: ColorSets.purple,\r\n    [RESOURCE_CATALYZED_LEMERGIUM_ACID]: ColorSets.green,\r\n    [RESOURCE_CATALYZED_LEMERGIUM_ALKALIDE]: ColorSets.green,\r\n    [RESOURCE_CATALYZED_ZYNTHIUM_ACID]: ColorSets.yellow,\r\n    [RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE]: ColorSets.yellow,\r\n    [RESOURCE_CATALYZED_GHODIUM_ACID]: ColorSets.white,\r\n    [RESOURCE_CATALYZED_GHODIUM_ALKALIDE]: ColorSets.white,\r\n};\r\nRoomVisual.prototype.resource = function (type, x, y, size = 0.25, opacity = 1) {\r\n    if (type == RESOURCE_ENERGY || type == RESOURCE_POWER) {\r\n        this._fluid(type, x, y, size, opacity);\r\n    }\r\n    else if ([RESOURCE_CATALYST, RESOURCE_HYDROGEN, RESOURCE_OXYGEN, RESOURCE_LEMERGIUM, RESOURCE_UTRIUM,\r\n        RESOURCE_ZYNTHIUM, RESOURCE_KEANIUM]\r\n        .includes(type)) {\r\n        this._mineral(type, x, y, size, opacity);\r\n    }\r\n    else if (ResourceColors[type] != undefined) {\r\n        this._compound(type, x, y, size, opacity);\r\n    }\r\n    else {\r\n        return ERR_INVALID_ARGS;\r\n    }\r\n    return OK;\r\n};\r\nRoomVisual.prototype._fluid = function (type, x, y, size = 0.25, opacity = 1) {\r\n    this.circle(x, y, {\r\n        radius: size,\r\n        fill: ResourceColors[type][0],\r\n        opacity: opacity,\r\n    });\r\n    this.text(type[0], x, y - (size * 0.1), {\r\n        font: (size * 1.5),\r\n        color: ResourceColors[type][1],\r\n        backgroundColor: ResourceColors[type][0],\r\n        backgroundPadding: 0,\r\n        opacity: opacity\r\n    });\r\n};\r\nRoomVisual.prototype._mineral = function (type, x, y, size = 0.25, opacity = 1) {\r\n    this.circle(x, y, {\r\n        radius: size,\r\n        fill: ResourceColors[type][0],\r\n        opacity: opacity,\r\n    });\r\n    this.circle(x, y, {\r\n        radius: size * 0.8,\r\n        fill: ResourceColors[type][1],\r\n        opacity: opacity,\r\n    });\r\n    this.text(type, x, y + (size * 0.03), {\r\n        font: 'bold ' + (size * 1.25) + ' arial',\r\n        color: ResourceColors[type][0],\r\n        backgroundColor: ResourceColors[type][1],\r\n        backgroundPadding: 0,\r\n        opacity: opacity\r\n    });\r\n};\r\nRoomVisual.prototype._compound = function (type, x, y, size = 0.25, opacity = 1) {\r\n    const label = type.replace('2', '₂');\r\n    this.text(label, x, y, {\r\n        font: 'bold ' + (size * 1) + ' arial',\r\n        color: ResourceColors[type][1],\r\n        backgroundColor: ResourceColors[type][0],\r\n        backgroundPadding: 0.3 * size,\r\n        opacity: opacity\r\n    });\r\n};\r\n","references":[]}
