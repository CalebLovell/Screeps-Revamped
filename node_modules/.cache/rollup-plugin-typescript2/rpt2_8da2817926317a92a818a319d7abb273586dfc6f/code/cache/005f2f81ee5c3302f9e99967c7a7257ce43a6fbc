{"code":"import * as tslib_1 from \"tslib\";\r\nimport { log } from '../../console/log';\r\nimport { Roles } from '../../creepSetups/setups';\r\nimport { BootstrappingOverlord } from '../../overlords/situational/bootstrap';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { Directive } from '../Directive';\r\nimport { NotifierPriority } from '../Notifier';\r\n/**\r\n * Bootstrapping directive: recover from a colony-wide crash or bootstrap from initial spawn-in\r\n */\r\nlet DirectiveBootstrap = class DirectiveBootstrap extends Directive {\r\n    constructor(flag) {\r\n        super(flag);\r\n        this.refresh(); // data needs to be recomputed each tick\r\n    }\r\n    refresh() {\r\n        super.refresh();\r\n        this.colony.bootstrapping = true;\r\n        this.needsMiner = (this.colony.getCreepsByRole(Roles.drone).length == 0);\r\n        this.needsManager = (this.colony.commandCenter != undefined &&\r\n            this.colony.commandCenter.overlord != undefined &&\r\n            this.colony.getCreepsByRole(Roles.manager).length == 0);\r\n        this.needsQueen = (this.colony.getCreepsByRole(Roles.queen).length == 0);\r\n    }\r\n    spawnMoarOverlords() {\r\n        this.overlords.bootstrap = new BootstrappingOverlord(this);\r\n    }\r\n    init() {\r\n        this.alert(`Colony in bootstrap mode!`, NotifierPriority.High);\r\n        if (Game.time % 100 == 0) {\r\n            log.alert(`Colony ${this.room.print} is in emergency recovery mode.`);\r\n        }\r\n    }\r\n    run() {\r\n        if (!this.needsQueen && !this.needsMiner && !this.needsManager) {\r\n            log.alert(`Colony ${this.room.print} has recovered from crash; removing bootstrap directive.`);\r\n            // Suicide any fillers so they don't get in the way\r\n            const overlord = this.overlords.bootstrap;\r\n            for (const filler of overlord.fillers) {\r\n                filler.suicide();\r\n            }\r\n            // Remove the directive\r\n            this.remove();\r\n        }\r\n    }\r\n};\r\nDirectiveBootstrap.directiveName = 'bootstrap';\r\nDirectiveBootstrap.color = COLOR_ORANGE;\r\nDirectiveBootstrap.secondaryColor = COLOR_ORANGE;\r\nDirectiveBootstrap = tslib_1.__decorate([\r\n    profile\r\n], DirectiveBootstrap);\r\nexport { DirectiveBootstrap };\r\n","references":["C:/git/Overmind/src/Colony.ts","C:/git/Overmind/src/console/log.ts","C:/git/Overmind/src/creepSetups/setups.ts","C:/git/Overmind/src/overlords/situational/bootstrap.ts","C:/git/Overmind/src/profiler/decorator.ts","C:/git/Overmind/src/directives/Directive.ts","C:/git/Overmind/src/directives/Notifier.ts"]}
