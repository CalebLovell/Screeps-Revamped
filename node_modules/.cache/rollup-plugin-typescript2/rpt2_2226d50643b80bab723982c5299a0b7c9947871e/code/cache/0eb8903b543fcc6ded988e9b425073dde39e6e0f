{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Mem } from '../memory/Memory';\r\nimport { profile } from '../profiler/decorator';\r\nimport { exponentialMovingAverage } from '../utilities/utils';\r\n/**\r\n * Operational statistics, stored in Memory.stats, will be updated every (this many) ticks\r\n */\r\nexport const LOG_STATS_INTERVAL = 8;\r\nlet Stats = class Stats {\r\n    static clean() {\r\n        if (Game.time % LOG_STATS_INTERVAL == 0) {\r\n            const protectedKeys = [\r\n                'persistent',\r\n            ];\r\n            for (const key in Memory.stats) {\r\n                if (!protectedKeys.includes(key)) {\r\n                    delete Memory.stats[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    static log(key, value, truncateNumbers = true) {\r\n        if (Game.time % LOG_STATS_INTERVAL == 0) {\r\n            if (truncateNumbers && value != undefined) {\r\n                const decimals = 5;\r\n                if (typeof value == 'number') {\r\n                    value = value.truncate(decimals);\r\n                }\r\n                else {\r\n                    for (const i in value) {\r\n                        value[i] = value[i].truncate(decimals);\r\n                    }\r\n                }\r\n            }\r\n            Mem.setDeep(Memory.stats, key, value);\r\n        }\r\n    }\r\n    // static accumulate(key: string, value: number): void {\r\n    // \tif (!Memory.stats[key]) {\r\n    // \t\tMemory.stats[key] = 0;\r\n    // \t}\r\n    // \tMemory.stats[key] += value;\r\n    // }\r\n    static run() {\r\n        if (Game.time % LOG_STATS_INTERVAL == 0) {\r\n            // Record IVM heap statistics\r\n            Memory.stats['cpu.heapStatistics'] = Game.cpu.getHeapStatistics();\r\n            // Log GCL\r\n            this.log('gcl.progress', Game.gcl.progress);\r\n            this.log('gcl.progressTotal', Game.gcl.progressTotal);\r\n            this.log('gcl.level', Game.gcl.level);\r\n            // Log memory usage\r\n            this.log('memory.used', RawMemory.get().length);\r\n            // Log CPU\r\n            this.log('cpu.limit', Game.cpu.limit);\r\n            this.log('cpu.bucket', Game.cpu.bucket);\r\n        }\r\n        const used = Game.cpu.getUsed();\r\n        this.log('cpu.getUsed', used);\r\n        Memory.stats.persistent.avgCPU = exponentialMovingAverage(used, Memory.stats.persistent.avgCPU, 100);\r\n    }\r\n};\r\nStats = tslib_1.__decorate([\r\n    profile\r\n], Stats);\r\nexport { Stats };\r\n","references":["C:/git/Screeps-Revamped/src/memory/Memory.ts","C:/git/Screeps-Revamped/src/profiler/decorator.ts","C:/git/Screeps-Revamped/src/utilities/utils.ts"]}
