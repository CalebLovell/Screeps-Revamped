{"code":"import * as tslib_1 from \"tslib\";\r\nimport { SpawnGroup } from 'logistics/SpawnGroup';\r\nimport { log } from '../../console/log';\r\nimport { Roles, Setups } from '../../creepSetups/setups';\r\nimport { OverlordPriority } from '../../priorities/priorities_overlords';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { Overlord } from '../Overlord';\r\n/**\r\n * Controller attacker overlord.  Spawn CLAIM creeps to mass up on a controller and attack all at once\r\n * This module was contributed by @sarrick and has since been modified\r\n */\r\nlet ControllerAttackerOverlord = class ControllerAttackerOverlord extends Overlord {\r\n    constructor(directive, priority = OverlordPriority.offense.controllerAttack) {\r\n        super(directive, 'controllerAttack', priority);\r\n        this.controllerAttackers = this.zerg(Roles.claim);\r\n        this.spawnGroup = new SpawnGroup(this, { requiredRCL: 4 });\r\n        this.refresh();\r\n    }\r\n    refresh() {\r\n        super.refresh();\r\n        if (this.room && this.room.controller) {\r\n            this.attackPositions = this.room.controller.pos.availableNeighbors(true);\r\n            this.readyTick = Game.time + (this.room.controller.upgradeBlocked || 0);\r\n        }\r\n        else {\r\n            this.attackPositions = [];\r\n            this.readyTick = Game.time;\r\n        }\r\n        this.assignments = this.getPositionAssignments();\r\n    }\r\n    getPositionAssignments() {\r\n        const assignments = {};\r\n        const maxLoops = Math.min(this.attackPositions.length, this.controllerAttackers.length);\r\n        const controllerAttackers = _.sortBy(this.controllerAttackers, zerg => zerg.name);\r\n        for (let i = 0; i < maxLoops; i++) {\r\n            assignments[controllerAttackers[i].name] = this.attackPositions[i];\r\n        }\r\n        return assignments;\r\n    }\r\n    init() {\r\n        // TODO: Prespawn attackers to arrive as cooldown disappears\r\n        if (this.attackPositions.length > 0 && Game.time >= this.readyTick) {\r\n            this.wishlist(this.attackPositions.length, Setups.infestors.controllerAttacker, { noLifetimeFilter: true });\r\n        }\r\n    }\r\n    run() {\r\n        for (const controllerAttacker of this.controllerAttackers) {\r\n            const attackPos = this.assignments[controllerAttacker.name];\r\n            if (attackPos) {\r\n                controllerAttacker.goTo(attackPos);\r\n            }\r\n            else {\r\n                log.debug(`No attack position for ${controllerAttacker.print}!`);\r\n            }\r\n        }\r\n        if (this.room && this.room.controller && !this.room.controller.upgradeBlocked) {\r\n            if (_.all(this.controllerAttackers, creep => creep.pos.isEqualTo(this.assignments[creep.name]))\r\n                || _.any(this.controllerAttackers, creep => creep.pos.isNearTo(this.room.controller)\r\n                    && (creep.ticksToLive || 10) <= 2)) {\r\n                this.launchAttack();\r\n            }\r\n        }\r\n    }\r\n    launchAttack() {\r\n        let signed = false;\r\n        if (this.room && this.room.controller) {\r\n            for (const infestor of this.controllerAttackers) {\r\n                infestor.attackController(this.room.controller);\r\n                if (!signed) {\r\n                    signed = (infestor.signController(this.room.controller, 'For the swarm') == OK);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nControllerAttackerOverlord = tslib_1.__decorate([\r\n    profile\r\n], ControllerAttackerOverlord);\r\nexport { ControllerAttackerOverlord };\r\n","references":["C:/git/Screeps-Revamped/src/logistics/SpawnGroup.ts","C:/git/Screeps-Revamped/src/console/log.ts","C:/git/Screeps-Revamped/src/creepSetups/setups.ts","C:/git/Screeps-Revamped/src/directives/offense/controllerAttack.ts","C:/git/Screeps-Revamped/src/priorities/priorities_overlords.ts","C:/git/Screeps-Revamped/src/profiler/decorator.ts","C:/git/Screeps-Revamped/src/zerg/Zerg.ts","C:/git/Screeps-Revamped/src/overlords/Overlord.ts"]}
