{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Roles, Setups } from '../../creepSetups/setups';\r\nimport { UpgradeSite } from '../../hiveClusters/upgradeSite';\r\nimport { OverlordPriority } from '../../priorities/priorities_overlords';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { boostResources } from '../../resources/map_resources';\r\nimport { Tasks } from '../../tasks/Tasks';\r\nimport { Overlord } from '../Overlord';\r\n/**\r\n * Spawns an upgrader to upgrade the room controller\r\n */\r\nlet UpgradingOverlord = class UpgradingOverlord extends Overlord {\r\n    constructor(upgradeSite, priority = OverlordPriority.upgrading.upgrade) {\r\n        super(upgradeSite, 'upgrade', priority);\r\n        this.upgradeSite = upgradeSite;\r\n        this.upgraders = this.zerg(Roles.upgrader, {\r\n            boostWishlist: [boostResources.upgrade[3]]\r\n        });\r\n    }\r\n    init() {\r\n        if (this.colony.level < 3) { // can't spawn upgraders at early levels\r\n            return;\r\n        }\r\n        if (this.colony.assets[RESOURCE_ENERGY] > UpgradeSite.settings.energyBuffer\r\n            || this.upgradeSite.controller.ticksToDowngrade < 500) {\r\n            const setup = this.colony.level == 8 ? Setups.upgraders.rcl8 : Setups.upgraders.default;\r\n            if (this.colony.level == 8) {\r\n                this.wishlist(1, setup);\r\n            }\r\n            else {\r\n                const upgradePowerEach = setup.getBodyPotential(WORK, this.colony);\r\n                const upgradersNeeded = Math.ceil(this.upgradeSite.upgradePowerNeeded / upgradePowerEach);\r\n                this.wishlist(upgradersNeeded, setup);\r\n            }\r\n        }\r\n    }\r\n    handleUpgrader(upgrader) {\r\n        if (upgrader.carry.energy > 0) {\r\n            // Repair link\r\n            if (this.upgradeSite.link && this.upgradeSite.link.hits < this.upgradeSite.link.hitsMax) {\r\n                upgrader.task = Tasks.repair(this.upgradeSite.link);\r\n                return;\r\n            }\r\n            // Repair container\r\n            if (this.upgradeSite.battery && this.upgradeSite.battery.hits < this.upgradeSite.battery.hitsMax) {\r\n                upgrader.task = Tasks.repair(this.upgradeSite.battery);\r\n                return;\r\n            }\r\n            // Build construction site\r\n            const inputSite = this.upgradeSite.findInputConstructionSite();\r\n            if (inputSite) {\r\n                upgrader.task = Tasks.build(inputSite);\r\n                return;\r\n            }\r\n            // Sign controller if needed\r\n            if (!this.upgradeSite.controller.signedByMe &&\r\n                !this.upgradeSite.controller.signedByScreeps) {\r\n                upgrader.task = Tasks.signController(this.upgradeSite.controller);\r\n                return;\r\n            }\r\n            upgrader.task = Tasks.upgrade(this.upgradeSite.controller);\r\n        }\r\n        else {\r\n            // Recharge from link or battery\r\n            if (this.upgradeSite.link && this.upgradeSite.link.energy > 0) {\r\n                upgrader.task = Tasks.withdraw(this.upgradeSite.link);\r\n            }\r\n            else if (this.upgradeSite.battery && this.upgradeSite.battery.energy > 0) {\r\n                upgrader.task = Tasks.withdraw(this.upgradeSite.battery);\r\n            }\r\n            // Find somewhere else to recharge from\r\n            else { // TODO: BUG HERE IF NO UPGRADE CONTAINER\r\n                if (this.upgradeSite.battery && this.upgradeSite.battery.targetedBy.length == 0) {\r\n                    upgrader.task = Tasks.recharge();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    run() {\r\n        this.autoRun(this.upgraders, upgrader => this.handleUpgrader(upgrader));\r\n    }\r\n};\r\nUpgradingOverlord = tslib_1.__decorate([\r\n    profile\r\n], UpgradingOverlord);\r\nexport { UpgradingOverlord };\r\n","references":["C:/git/Screeps-Revamped/src/creepSetups/setups.ts","C:/git/Screeps-Revamped/src/hiveClusters/upgradeSite.ts","C:/git/Screeps-Revamped/src/priorities/priorities_overlords.ts","C:/git/Screeps-Revamped/src/profiler/decorator.ts","C:/git/Screeps-Revamped/src/resources/map_resources.ts","C:/git/Screeps-Revamped/src/tasks/Tasks.ts","C:/git/Screeps-Revamped/src/zerg/Zerg.ts","C:/git/Screeps-Revamped/src/overlords/Overlord.ts"]}
