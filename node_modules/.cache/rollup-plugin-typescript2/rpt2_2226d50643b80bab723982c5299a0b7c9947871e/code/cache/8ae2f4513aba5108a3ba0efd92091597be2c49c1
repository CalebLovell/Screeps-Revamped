{"code":"import * as tslib_1 from \"tslib\";\r\nimport { profile } from '../profiler/decorator';\r\nconst MAX_ACTIVE_SEGMENTS = 10;\r\nconst DefaultSegmenterMemory = {\r\n    activeSegments: [],\r\n    activeForeignSegment: undefined,\r\n    publicSegments: [],\r\n};\r\nif (!Memory.segmenter) {\r\n    Memory.segmenter = {};\r\n}\r\n_.defaultsDeep(Memory.segmenter, DefaultSegmenterMemory);\r\n/**\r\n * The segmenter module controls public and private segment memory access\r\n */\r\nlet Segmenter = class Segmenter {\r\n    static get memory() {\r\n        return Memory.segmenter;\r\n    }\r\n    static requestSegments(...ids) {\r\n        for (const id of ids) {\r\n            if (!this.memory.activeSegments.includes(id)) {\r\n                this.memory.activeSegments.push(id);\r\n                if (this.memory.activeSegments.length > MAX_ACTIVE_SEGMENTS) {\r\n                    const removeSegment = this.memory.activeSegments.shift();\r\n                    console.log(`Maximum active segments reached. Discarding segment ${removeSegment}.`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    static getSegment(id) {\r\n        if ((this.cache.lastAccessed[id] || 0) > (this.cache.lastModified[id] || 0)) {\r\n            return this.cache.segments[id];\r\n        }\r\n        const str = RawMemory.segments[id];\r\n        let segment;\r\n        try {\r\n            segment = JSON.parse(str);\r\n        }\r\n        catch (e) {\r\n            console.log(`Creating new object for RawMemory.segments[${id}].`);\r\n            segment = {};\r\n            this.cache.segments[id] = segment;\r\n            this.cache.lastModified[id] = Game.time;\r\n        }\r\n        this.cache.segments[id] = segment;\r\n        this.cache.lastAccessed[id] = Game.time;\r\n        return this.cache.segments[id];\r\n    }\r\n    static getSegmentProperty(id, key) {\r\n        const segment = this.getSegment(id);\r\n        return segment[key];\r\n    }\r\n    static setSegment(id, value) {\r\n        this.cache.segments[id] = value;\r\n        this.cache.lastModified[id] = Game.time;\r\n    }\r\n    static setSegmentProperty(id, key, value) {\r\n        const segment = this.getSegment(id);\r\n        segment[key] = value;\r\n        this.cache.lastModified[id] = Game.time;\r\n    }\r\n    static requestForeignSegment(username, id) {\r\n        if (username) {\r\n            this.memory.activeForeignSegment = {\r\n                username: username,\r\n                id: id,\r\n            };\r\n        }\r\n    }\r\n    static markSegmentAsPublic(id) {\r\n        if (!this.memory.publicSegments.includes(id)) {\r\n            this.memory.publicSegments.push(id);\r\n        }\r\n    }\r\n    static getForeignSegment() {\r\n        if (RawMemory.foreignSegment) {\r\n            let segment;\r\n            try {\r\n                segment = JSON.parse(RawMemory.foreignSegment.data);\r\n                return segment;\r\n            }\r\n            catch (e) {\r\n                console.log(`Could not parse RawMemory.foreignSegment.data!`);\r\n            }\r\n        }\r\n    }\r\n    static getForeignSegmentProperty(key) {\r\n        if (RawMemory.foreignSegment) {\r\n            let segment;\r\n            try {\r\n                segment = JSON.parse(RawMemory.foreignSegment.data);\r\n            }\r\n            catch (e) {\r\n                segment = {};\r\n                console.log(`Could not parse RawMemory.foreignSegment.data!`);\r\n            }\r\n            return segment[key];\r\n        }\r\n    }\r\n    static run() {\r\n        // Set active, public, and foreign segments\r\n        RawMemory.setActiveSegments(this.memory.activeSegments);\r\n        RawMemory.setPublicSegments(this.memory.publicSegments);\r\n        if (this.memory.activeForeignSegment) {\r\n            RawMemory.setActiveForeignSegment(this.memory.activeForeignSegment.username, this.memory.activeForeignSegment.id);\r\n        }\r\n        else {\r\n            RawMemory.setActiveForeignSegment(null);\r\n        }\r\n        // Write things that have been modified this tick to memory\r\n        for (const id in this.cache.lastModified) {\r\n            if (this.cache.lastModified[id] == Game.time) {\r\n                RawMemory.segments[id] = JSON.stringify(this.cache.segments[id]);\r\n            }\r\n        }\r\n    }\r\n};\r\nSegmenter.cache = {\r\n    segments: {},\r\n    lastAccessed: {},\r\n    lastModified: {},\r\n};\r\nSegmenter = tslib_1.__decorate([\r\n    profile\r\n], Segmenter);\r\nexport { Segmenter };\r\n","references":["C:/git/Screeps-Revamped/src/profiler/decorator.ts"]}
