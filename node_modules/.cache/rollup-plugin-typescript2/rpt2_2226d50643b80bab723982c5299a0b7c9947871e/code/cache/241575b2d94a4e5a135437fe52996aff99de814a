{"code":"/* tslint:disable:no-bitwise */\r\nconst digestLength = 32;\r\nconst blockSize = 64;\r\n// Convert a string to a Uint8Array\r\nfunction stringToUint8Array(str) {\r\n    const arrayBuffer = new ArrayBuffer(str.length * 1);\r\n    const newUint = new Uint8Array(arrayBuffer);\r\n    newUint.forEach((_, i) => {\r\n        newUint[i] = str.charCodeAt(i);\r\n    });\r\n    return newUint;\r\n}\r\n// SHA-256 constants\r\nconst K = new Uint32Array([\r\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\r\n    0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\r\n    0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\r\n    0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\r\n    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\r\n    0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\r\n    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\r\n    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\r\n    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\r\n    0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\r\n    0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\r\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n]);\r\nfunction hashBlocks(w, v, p, pos, len) {\r\n    let a, b, c, d, e, f, g, h, u, i, j, t1, t2;\r\n    while (len >= 64) {\r\n        a = v[0];\r\n        b = v[1];\r\n        c = v[2];\r\n        d = v[3];\r\n        e = v[4];\r\n        f = v[5];\r\n        g = v[6];\r\n        h = v[7];\r\n        for (i = 0; i < 16; i++) {\r\n            j = pos + i * 4;\r\n            w[i] = (((p[j] & 0xff) << 24) | ((p[j + 1] & 0xff) << 16) |\r\n                ((p[j + 2] & 0xff) << 8) | (p[j + 3] & 0xff));\r\n        }\r\n        for (i = 16; i < 64; i++) {\r\n            u = w[i - 2];\r\n            t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10);\r\n            u = w[i - 15];\r\n            t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3);\r\n            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\r\n        }\r\n        for (i = 0; i < 64; i++) {\r\n            t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^\r\n                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +\r\n                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;\r\n            t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^\r\n                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;\r\n            h = g;\r\n            g = f;\r\n            f = e;\r\n            e = (d + t1) | 0;\r\n            d = c;\r\n            c = b;\r\n            b = a;\r\n            a = (t1 + t2) | 0;\r\n        }\r\n        v[0] += a;\r\n        v[1] += b;\r\n        v[2] += c;\r\n        v[3] += d;\r\n        v[4] += e;\r\n        v[5] += f;\r\n        v[6] += g;\r\n        v[7] += h;\r\n        pos += 64;\r\n        len -= 64;\r\n    }\r\n    return pos;\r\n}\r\n// Hash implements SHA256 hash algorithm.\r\nclass Hash {\r\n    constructor() {\r\n        this.digestLength = digestLength;\r\n        this.blockSize = blockSize;\r\n        // Int32Array is used instead of Uint32Array for performance reasons.\r\n        this.state = new Int32Array(8); // hash state\r\n        this.temp = new Int32Array(64); // temporary state\r\n        this.buffer = new Uint8Array(128); // buffer for data to hash\r\n        this.bufferLength = 0; // number of bytes in buffer\r\n        this.bytesHashed = 0; // number of total bytes hashed\r\n        this.finished = false; // indicates whether the hash was finalized\r\n        this.reset();\r\n    }\r\n    // Resets hash state making it possible\r\n    // to re-use this instance to hash other data.\r\n    reset() {\r\n        this.state[0] = 0x6a09e667;\r\n        this.state[1] = 0xbb67ae85;\r\n        this.state[2] = 0x3c6ef372;\r\n        this.state[3] = 0xa54ff53a;\r\n        this.state[4] = 0x510e527f;\r\n        this.state[5] = 0x9b05688c;\r\n        this.state[6] = 0x1f83d9ab;\r\n        this.state[7] = 0x5be0cd19;\r\n        this.bufferLength = 0;\r\n        this.bytesHashed = 0;\r\n        this.finished = false;\r\n        return this;\r\n    }\r\n    // Cleans internal buffers and re-initializes hash state.\r\n    clean() {\r\n        for (let i = 0; i < this.buffer.length; i++) {\r\n            this.buffer[i] = 0;\r\n        }\r\n        for (let i = 0; i < this.temp.length; i++) {\r\n            this.temp[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    // Updates hash state with the given data.\r\n    //\r\n    // Optionally, length of the data can be specified to hash\r\n    // fewer bytes than data.length.\r\n    //\r\n    // Throws error when trying to update already finalized hash:\r\n    // instance must be reset to use it again.\r\n    update(data, dataLength = data.length) {\r\n        if (this.finished) {\r\n            throw new Error('SHA256: can\\'t update because hash was finished.');\r\n        }\r\n        let dataPos = 0;\r\n        this.bytesHashed += dataLength;\r\n        if (this.bufferLength > 0) {\r\n            while (this.bufferLength < 64 && dataLength > 0) {\r\n                this.buffer[this.bufferLength++] = data[dataPos++];\r\n                dataLength--;\r\n            }\r\n            if (this.bufferLength === 64) {\r\n                hashBlocks(this.temp, this.state, this.buffer, 0, 64);\r\n                this.bufferLength = 0;\r\n            }\r\n        }\r\n        if (dataLength >= 64) {\r\n            dataPos = hashBlocks(this.temp, this.state, data, dataPos, dataLength);\r\n            dataLength %= 64;\r\n        }\r\n        while (dataLength > 0) {\r\n            this.buffer[this.bufferLength++] = data[dataPos++];\r\n            dataLength--;\r\n        }\r\n        return this;\r\n    }\r\n    // Finalizes hash state and puts hash into out.\r\n    //\r\n    // If hash was already finalized, puts the same value.\r\n    finish(out) {\r\n        if (!this.finished) {\r\n            const bytesHashed = this.bytesHashed;\r\n            const left = this.bufferLength;\r\n            const bitLenHi = (bytesHashed / 0x20000000) | 0;\r\n            const bitLenLo = bytesHashed << 3;\r\n            const padLength = (bytesHashed % 64 < 56) ? 64 : 128;\r\n            this.buffer[left] = 0x80;\r\n            for (let i = left + 1; i < padLength - 8; i++) {\r\n                this.buffer[i] = 0;\r\n            }\r\n            this.buffer[padLength - 8] = (bitLenHi >>> 24) & 0xff;\r\n            this.buffer[padLength - 7] = (bitLenHi >>> 16) & 0xff;\r\n            this.buffer[padLength - 6] = (bitLenHi >>> 8) & 0xff;\r\n            this.buffer[padLength - 5] = (bitLenHi >>> 0) & 0xff;\r\n            this.buffer[padLength - 4] = (bitLenLo >>> 24) & 0xff;\r\n            this.buffer[padLength - 3] = (bitLenLo >>> 16) & 0xff;\r\n            this.buffer[padLength - 2] = (bitLenLo >>> 8) & 0xff;\r\n            this.buffer[padLength - 1] = (bitLenLo >>> 0) & 0xff;\r\n            hashBlocks(this.temp, this.state, this.buffer, 0, padLength);\r\n            this.finished = true;\r\n        }\r\n        for (let i = 0; i < 8; i++) {\r\n            out[i * 4 + 0] = (this.state[i] >>> 24) & 0xff;\r\n            out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;\r\n            out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;\r\n            out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;\r\n        }\r\n        return this;\r\n    }\r\n    // Returns the final hash digest.\r\n    digest() {\r\n        const out = new Uint8Array(this.digestLength);\r\n        this.finish(out);\r\n        return out;\r\n    }\r\n    // Internal function for use in HMAC for optimization.\r\n    _saveState(out) {\r\n        for (let i = 0; i < this.state.length; i++) {\r\n            out[i] = this.state[i];\r\n        }\r\n    }\r\n    // Internal function for use in HMAC for optimization.\r\n    _restoreState(from, bytesHashed) {\r\n        for (let i = 0; i < this.state.length; i++) {\r\n            this.state[i] = from[i];\r\n        }\r\n        this.bytesHashed = bytesHashed;\r\n        this.finished = false;\r\n        this.bufferLength = 0;\r\n    }\r\n}\r\n// HMAC implements HMAC-SHA256 message authentication algorithm.\r\nclass HMAC {\r\n    constructor(key) {\r\n        this.inner = new Hash();\r\n        this.outer = new Hash();\r\n        this.blockSize = this.inner.blockSize;\r\n        this.digestLength = this.inner.digestLength;\r\n        const pad = new Uint8Array(this.blockSize);\r\n        if (key.length > this.blockSize) {\r\n            (new Hash()).update(key).finish(pad).clean();\r\n        }\r\n        else {\r\n            for (let i = 0; i < key.length; i++) {\r\n                pad[i] = key[i];\r\n            }\r\n        }\r\n        for (let i = 0; i < pad.length; i++) {\r\n            pad[i] ^= 0x36;\r\n        }\r\n        this.inner.update(pad);\r\n        for (let i = 0; i < pad.length; i++) {\r\n            pad[i] ^= 0x36 ^ 0x5c;\r\n        }\r\n        this.outer.update(pad);\r\n        this.istate = new Uint32Array(8);\r\n        this.ostate = new Uint32Array(8);\r\n        this.inner._saveState(this.istate);\r\n        this.outer._saveState(this.ostate);\r\n        for (let i = 0; i < pad.length; i++) {\r\n            pad[i] = 0;\r\n        }\r\n    }\r\n    // Returns HMAC state to the state initialized with key\r\n    // to make it possible to run HMAC over the other data with the same\r\n    // key without creating a new instance.\r\n    reset() {\r\n        this.inner._restoreState(this.istate, this.inner.blockSize);\r\n        this.outer._restoreState(this.ostate, this.outer.blockSize);\r\n        return this;\r\n    }\r\n    // Cleans HMAC state.\r\n    clean() {\r\n        for (let i = 0; i < this.istate.length; i++) {\r\n            this.ostate[i] = this.istate[i] = 0;\r\n        }\r\n        this.inner.clean();\r\n        this.outer.clean();\r\n    }\r\n    // Updates state with provided data.\r\n    update(data) {\r\n        this.inner.update(data);\r\n        return this;\r\n    }\r\n    // Finalizes HMAC and puts the result in out.\r\n    finish(out) {\r\n        if (this.outer.finished) {\r\n            this.outer.finish(out);\r\n        }\r\n        else {\r\n            this.inner.finish(out);\r\n            this.outer.update(out, this.digestLength).finish(out);\r\n        }\r\n        return this;\r\n    }\r\n    // Returns message authentication code.\r\n    digest() {\r\n        const out = new Uint8Array(this.digestLength);\r\n        this.finish(out);\r\n        return out;\r\n    }\r\n}\r\n// Returns SHA256 hash of data.\r\nexport function sha256(data) {\r\n    const h = (new Hash()).update(stringToUint8Array(data));\r\n    const digest = h.digest();\r\n    h.clean();\r\n    return digest;\r\n}\r\n// Returns HMAC-SHA256 of data under the key.\r\nexport function hmac(key, data) {\r\n    const h = (new HMAC(key)).update(data);\r\n    const digest = h.digest();\r\n    h.clean();\r\n    return digest;\r\n}\r\n","references":[]}
