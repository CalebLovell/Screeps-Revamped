{"code":"import * as tslib_1 from \"tslib\";\r\nvar DirectiveColonize_1;\r\nimport { log } from '../../console/log';\r\nimport { Roles } from '../../creepSetups/setups';\r\nimport { ClaimingOverlord } from '../../overlords/colonization/claimer';\r\nimport { PioneerOverlord } from '../../overlords/colonization/pioneer';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { Cartographer, ROOMTYPE_CONTROLLER } from '../../utilities/Cartographer';\r\nimport { printRoomName } from '../../utilities/utils';\r\nimport { MY_USERNAME } from '../../~settings';\r\nimport { Directive } from '../Directive';\r\n/**\r\n * Claims a new room and builds a spawn but does not incubate. Removes when spawn is constructed.\r\n */\r\nlet DirectiveColonize = DirectiveColonize_1 = class DirectiveColonize extends Directive {\r\n    constructor(flag) {\r\n        super(flag, colony => colony.level >= DirectiveColonize_1.requiredRCL\r\n            && colony.name != Directive.getPos(flag).roomName && colony.spawns.length > 0);\r\n        // Register incubation status\r\n        this.toColonize = this.room ? Overmind.colonies[Overmind.colonyMap[this.room.name]] : undefined;\r\n        // Remove if misplaced\r\n        if (Cartographer.roomType(this.pos.roomName) != ROOMTYPE_CONTROLLER) {\r\n            log.warning(`${this.print}: ${printRoomName(this.pos.roomName)} is not a controller room; ` +\r\n                `removing directive!`);\r\n            this.remove(true);\r\n        }\r\n    }\r\n    spawnMoarOverlords() {\r\n        this.overlords.claim = new ClaimingOverlord(this);\r\n        this.overlords.pioneer = new PioneerOverlord(this);\r\n    }\r\n    init() {\r\n        this.alert(`Colonization in progress`);\r\n    }\r\n    run(verbose = false) {\r\n        if (this.toColonize && this.toColonize.spawns.length > 0) {\r\n            // Reassign all pioneers to be miners and workers\r\n            const miningOverlords = _.map(this.toColonize.miningSites, site => site.overlords.mine);\r\n            for (const pioneer of this.overlords.pioneer.pioneers) {\r\n                const miningOverlord = miningOverlords.shift();\r\n                if (miningOverlord) {\r\n                    if (verbose) {\r\n                        log.debug(`Reassigning: ${pioneer.print} to mine: ${miningOverlord.print}`);\r\n                    }\r\n                    pioneer.reassign(miningOverlord, Roles.drone);\r\n                }\r\n                else {\r\n                    if (verbose) {\r\n                        log.debug(`Reassigning: ${pioneer.print} to work: ${this.toColonize.overlords.work.print}`);\r\n                    }\r\n                    pioneer.reassign(this.toColonize.overlords.work, Roles.worker);\r\n                }\r\n            }\r\n            // Remove the directive\r\n            this.remove();\r\n        }\r\n        if (Game.time % 10 == 2 && this.room && !!this.room.owner && this.room.owner != MY_USERNAME) {\r\n            log.notify(`Removing Colonize directive in ${this.pos.roomName}: room already owned by another player.`);\r\n            this.remove();\r\n        }\r\n    }\r\n};\r\nDirectiveColonize.directiveName = 'colonize';\r\nDirectiveColonize.color = COLOR_PURPLE;\r\nDirectiveColonize.secondaryColor = COLOR_GREY;\r\nDirectiveColonize.requiredRCL = 3;\r\nDirectiveColonize = DirectiveColonize_1 = tslib_1.__decorate([\r\n    profile\r\n], DirectiveColonize);\r\nexport { DirectiveColonize };\r\n","references":["C:/git/Screeps-Revamped/src/Colony.ts","C:/git/Screeps-Revamped/src/console/log.ts","C:/git/Screeps-Revamped/src/creepSetups/setups.ts","C:/git/Screeps-Revamped/src/overlords/colonization/claimer.ts","C:/git/Screeps-Revamped/src/overlords/colonization/pioneer.ts","C:/git/Screeps-Revamped/src/profiler/decorator.ts","C:/git/Screeps-Revamped/src/utilities/Cartographer.ts","C:/git/Screeps-Revamped/src/utilities/utils.ts","C:/git/Screeps-Revamped/src/~settings.ts","C:/git/Screeps-Revamped/src/directives/Directive.ts"]}
