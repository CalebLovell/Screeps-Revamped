{"code":"import * as tslib_1 from \"tslib\";\r\nimport { OutpostDefenseOverlord } from '../../overlords/defense/outpostDefense';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { Directive } from '../Directive';\r\nimport { NotifierPriority } from '../Notifier';\r\n/**\r\n * Defend an outpost against an incoming player invasion\r\n */\r\nlet DirectiveOutpostDefense = class DirectiveOutpostDefense extends Directive {\r\n    constructor(flag) {\r\n        super(flag);\r\n    }\r\n    spawnMoarOverlords() {\r\n        this.overlords.outpostDefense = new OutpostDefenseOverlord(this);\r\n    }\r\n    init() {\r\n        const numHostiles = this.room ? this.room.hostiles.length.toString() : '???';\r\n        this.alert(`Outpost defense (hostiles: ${numHostiles})`, NotifierPriority.High);\r\n    }\r\n    run() {\r\n        if (!this.room || this.room.hostiles.length > 0) {\r\n            this.memory.safeSince = Game.time;\r\n        }\r\n        // If there are no hostiles left in the room and everyone's healed, then remove the flag\r\n        if (this.room && this.room.hostiles.length == 0 &&\r\n            Game.time - this.memory.safeSince > 100 && this.room.hostileStructures.length == 0) {\r\n            if (_.filter(this.room.creeps, creep => creep.hits < creep.hitsMax).length == 0) {\r\n                this.remove();\r\n            }\r\n        }\r\n    }\r\n};\r\nDirectiveOutpostDefense.directiveName = 'outpostDefense';\r\nDirectiveOutpostDefense.color = COLOR_BLUE;\r\nDirectiveOutpostDefense.secondaryColor = COLOR_RED;\r\nDirectiveOutpostDefense = tslib_1.__decorate([\r\n    profile\r\n], DirectiveOutpostDefense);\r\nexport { DirectiveOutpostDefense };\r\n","references":["C:/git/Screeps-Revamped/src/overlords/defense/outpostDefense.ts","C:/git/Screeps-Revamped/src/profiler/decorator.ts","C:/git/Screeps-Revamped/src/directives/Directive.ts","C:/git/Screeps-Revamped/src/directives/Notifier.ts"]}
