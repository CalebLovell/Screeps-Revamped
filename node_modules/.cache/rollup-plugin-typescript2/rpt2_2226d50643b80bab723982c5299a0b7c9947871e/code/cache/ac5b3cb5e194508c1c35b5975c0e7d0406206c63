{"code":"import * as tslib_1 from \"tslib\";\r\nimport { log } from '../../console/log';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { boostParts } from '../../resources/map_resources';\r\nimport { Task } from '../Task';\r\nexport const getBoostedTaskName = 'getBoosted';\r\nexport const MIN_LIFETIME_FOR_BOOST = 0.85;\r\nlet TaskGetBoosted = class TaskGetBoosted extends Task {\r\n    constructor(target, boostType, partCount, options = {}) {\r\n        super(getBoostedTaskName, target, options);\r\n        // Settings\r\n        this.data.resourceType = boostType;\r\n        this.data.amount = partCount;\r\n    }\r\n    isValidTask() {\r\n        const lifetime = _.any(this.creep.body, part => part.type == CLAIM) ? CREEP_CLAIM_LIFE_TIME : CREEP_LIFE_TIME;\r\n        if (this.creep.ticksToLive && this.creep.ticksToLive < MIN_LIFETIME_FOR_BOOST * lifetime) {\r\n            return false; // timeout after this amount of lifespan has passed\r\n        }\r\n        const partCount = (this.data.amount || this.creep.getActiveBodyparts(boostParts[this.data.resourceType]));\r\n        return (this.creep.boostCounts[this.data.resourceType] || 0) < partCount;\r\n    }\r\n    isValidTarget() {\r\n        const partCount = (this.data.amount || this.creep.getActiveBodyparts(boostParts[this.data.resourceType]));\r\n        return this.target && this.target.mineralType == this.data.resourceType &&\r\n            this.target.mineralAmount >= LAB_BOOST_MINERAL * partCount &&\r\n            this.target.energy >= LAB_BOOST_ENERGY * partCount;\r\n    }\r\n    work() {\r\n        if (this.creep.spawning) {\r\n            return ERR_INVALID_TARGET;\r\n        }\r\n        const partCount = (this.data.amount || this.creep.getActiveBodyparts(boostParts[this.data.resourceType]));\r\n        if (this.target.mineralType == this.data.resourceType &&\r\n            this.target.mineralAmount >= LAB_BOOST_MINERAL * partCount &&\r\n            this.target.energy >= LAB_BOOST_ENERGY * partCount) {\r\n            const result = this.target.boostCreep(deref(this._creep.name), this.data.amount);\r\n            log.info(`Lab@${this.target.pos.print}: boosting creep ${this.creep.print} with ${this.target.mineralType}!`\r\n                + ` Response: ${result}`);\r\n            return result;\r\n        }\r\n        else {\r\n            return ERR_NOT_FOUND;\r\n        }\r\n    }\r\n};\r\nTaskGetBoosted = tslib_1.__decorate([\r\n    profile\r\n], TaskGetBoosted);\r\nexport { TaskGetBoosted };\r\n","references":["C:/git/Screeps-Revamped/src/console/log.ts","C:/git/Screeps-Revamped/src/profiler/decorator.ts","C:/git/Screeps-Revamped/src/resources/map_resources.ts","C:/git/Screeps-Revamped/src/tasks/Task.ts"]}
