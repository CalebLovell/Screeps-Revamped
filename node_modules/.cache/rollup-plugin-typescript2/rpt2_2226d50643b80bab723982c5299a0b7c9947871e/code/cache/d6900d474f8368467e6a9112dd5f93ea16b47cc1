{"code":"// Intra- and inter-tick structure caching, adapted from semperRabbit's IVM module\r\nimport { getCacheExpiration, onPublicServer } from '../utilities/utils';\r\nconst roomStructureIDs = {};\r\nconst roomStructuresExpiration = {};\r\nconst multipleList = [\r\n    STRUCTURE_SPAWN, STRUCTURE_EXTENSION, STRUCTURE_ROAD, STRUCTURE_WALL,\r\n    STRUCTURE_RAMPART, STRUCTURE_KEEPER_LAIR, STRUCTURE_PORTAL, STRUCTURE_LINK,\r\n    STRUCTURE_TOWER, STRUCTURE_LAB, STRUCTURE_CONTAINER, STRUCTURE_POWER_BANK,\r\n];\r\nconst singleList = [\r\n    STRUCTURE_OBSERVER, STRUCTURE_POWER_SPAWN, STRUCTURE_EXTRACTOR, STRUCTURE_NUKER,\r\n];\r\nconst notRepairable = [STRUCTURE_KEEPER_LAIR, STRUCTURE_PORTAL, STRUCTURE_POWER_BANK];\r\nconst STRUCTURE_TIMEOUT = onPublicServer() ? 50 : 10;\r\nRoom.prototype._refreshStructureCache = function () {\r\n    // if cache is expired or doesn't exist\r\n    if (!roomStructuresExpiration[this.name]\r\n        || !roomStructureIDs[this.name]\r\n        || Game.time > roomStructuresExpiration[this.name]) {\r\n        roomStructuresExpiration[this.name] = getCacheExpiration(STRUCTURE_TIMEOUT);\r\n        roomStructureIDs[this.name] = _.mapValues(_.groupBy(this.find(FIND_STRUCTURES), (s) => s.structureType), (structures) => _.map(structures, s => s.id));\r\n    }\r\n};\r\nmultipleList.forEach(function (type) {\r\n    Object.defineProperty(Room.prototype, type + 's', {\r\n        get: function () {\r\n            if (this['_' + type + 's']) {\r\n                return this['_' + type + 's'];\r\n            }\r\n            else {\r\n                this._refreshStructureCache();\r\n                if (roomStructureIDs[this.name][type]) {\r\n                    return this['_' + type + 's'] = _.compact(_.map(roomStructureIDs[this.name][type], Game.getObjectById));\r\n                }\r\n                else {\r\n                    return this['_' + type + 's'] = [];\r\n                }\r\n            }\r\n        },\r\n        configurable: true,\r\n    });\r\n});\r\nsingleList.forEach(function (type) {\r\n    Object.defineProperty(Room.prototype, type, {\r\n        get: function () {\r\n            if (this['_' + type]) {\r\n                return this['_' + type];\r\n            }\r\n            else {\r\n                this._refreshStructureCache();\r\n                if (roomStructureIDs[this.name][type]) {\r\n                    return this['_' + type] = Game.getObjectById(roomStructureIDs[this.name][type][0]);\r\n                }\r\n                else {\r\n                    return this['_' + type] = undefined;\r\n                }\r\n            }\r\n        },\r\n        configurable: true,\r\n    });\r\n});\r\nObject.defineProperty(Room.prototype, 'storageUnits', {\r\n    get() {\r\n        if (!this._storageUnits) {\r\n            this._storageUnits = _.compact([this.storage, this.terminal]).concat(this.containers);\r\n        }\r\n        return this._storageUnits;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'sources', {\r\n    get() {\r\n        if (!this._sources) {\r\n            this._sources = this.find(FIND_SOURCES);\r\n        }\r\n        return this.find(FIND_SOURCES);\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'mineral', {\r\n    get() {\r\n        if (!this._mineral) {\r\n            this._mineral = this.find(FIND_MINERALS)[0];\r\n        }\r\n        return this._mineral;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'repairables', {\r\n    get() {\r\n        if (!this._repairables) {\r\n            this._refreshStructureCache();\r\n            if (roomStructureIDs[this.name].repairables) {\r\n                return this._repairables = _.compact(_.map(roomStructureIDs[this.name].repairables, Game.getObjectById));\r\n            }\r\n            else {\r\n                let repairables = [];\r\n                for (const structureType of singleList) {\r\n                    if (this[structureType]) {\r\n                        repairables.push(this[structureType]);\r\n                    }\r\n                }\r\n                for (const structureType of multipleList) {\r\n                    if (structureType != STRUCTURE_WALL &&\r\n                        structureType != STRUCTURE_RAMPART &&\r\n                        structureType != STRUCTURE_ROAD &&\r\n                        !notRepairable.includes(structureType)) {\r\n                        repairables = repairables.concat(this[structureType + 's']);\r\n                    }\r\n                }\r\n                roomStructureIDs[this.name].repairables = _.map(repairables, s => s.id);\r\n                return this._repairables = repairables;\r\n            }\r\n        }\r\n        return this._repairables;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'walkableRamparts', {\r\n    get() {\r\n        if (!this._walkableRamparts) {\r\n            this._refreshStructureCache();\r\n            if (roomStructureIDs[this.name].walkableRamparts) {\r\n                return this._walkableRamparts = _.compact(_.map(roomStructureIDs[this.name].walkableRamparts, Game.getObjectById));\r\n            }\r\n            else {\r\n                const walkableRamparts = _.filter(this.ramparts, (r) => r.pos.isWalkable(true));\r\n                roomStructureIDs[this.name].walkableRamparts = _.map(walkableRamparts, r => r.id);\r\n                return this._walkableRamparts = walkableRamparts;\r\n            }\r\n        }\r\n        return this._walkableRamparts;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'rechargeables', {\r\n    get() {\r\n        if (!this._rechargeables) {\r\n            this._rechargeables = [...this.storageUnits,\r\n                ...this.droppedEnergy,\r\n                ...this.tombstones];\r\n        }\r\n        return this._rechargeables;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'barriers', {\r\n    get() {\r\n        if (!this._barriers) {\r\n            this._barriers = [].concat(this.ramparts, this.constructedWalls);\r\n        }\r\n        return this._barriers;\r\n    },\r\n    configurable: true,\r\n});\r\nObject.defineProperty(Room.prototype, 'walls', {\r\n    get() {\r\n        return this.constructedWalls;\r\n    },\r\n    configurable: true,\r\n});\r\n","references":["C:/git/Screeps-Revamped/src/utilities/utils.ts"]}
