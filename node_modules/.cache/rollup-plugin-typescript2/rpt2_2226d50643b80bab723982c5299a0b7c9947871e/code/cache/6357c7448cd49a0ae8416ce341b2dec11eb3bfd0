{"code":"import * as tslib_1 from \"tslib\";\r\nimport { profile } from '../../profiler/decorator';\r\nimport { Task } from '../Task';\r\nexport const attackTaskName = 'attack';\r\nlet TaskAttack = class TaskAttack extends Task {\r\n    constructor(target, options = {}) {\r\n        super(attackTaskName, target, options);\r\n        // Settings\r\n        this.settings.targetRange = 3;\r\n    }\r\n    isValidTask() {\r\n        return (this.creep.getActiveBodyparts(ATTACK) > 0 || this.creep.getActiveBodyparts(RANGED_ATTACK) > 0);\r\n    }\r\n    isValidTarget() {\r\n        return this.target && this.target.hits > 0;\r\n    }\r\n    work() {\r\n        const creep = this.creep;\r\n        const target = this.target;\r\n        let attackReturn = 0;\r\n        let rangedAttackReturn = 0;\r\n        if (creep.getActiveBodyparts(ATTACK) > 0) {\r\n            if (creep.pos.isNearTo(target)) {\r\n                attackReturn = creep.attack(target);\r\n            }\r\n            else {\r\n                attackReturn = this.moveToTarget(1); // approach target if you also have attack parts\r\n            }\r\n        }\r\n        if (creep.pos.inRangeTo(target, 3) && creep.getActiveBodyparts(RANGED_ATTACK) > 0) {\r\n            rangedAttackReturn = creep.rangedAttack(target);\r\n        }\r\n        if (attackReturn == OK && rangedAttackReturn == OK) {\r\n            return OK;\r\n        }\r\n        else {\r\n            if (attackReturn != OK) {\r\n                return rangedAttackReturn;\r\n            }\r\n            else {\r\n                return attackReturn;\r\n            }\r\n        }\r\n    }\r\n};\r\nTaskAttack = tslib_1.__decorate([\r\n    profile\r\n], TaskAttack);\r\nexport { TaskAttack };\r\n","references":["C:/git/Screeps-Revamped/src/profiler/decorator.ts","C:/git/Screeps-Revamped/src/tasks/Task.ts"]}
