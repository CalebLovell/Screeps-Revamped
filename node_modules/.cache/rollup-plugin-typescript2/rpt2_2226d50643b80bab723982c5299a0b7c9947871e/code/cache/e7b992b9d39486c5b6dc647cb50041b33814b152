{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Roles, Setups } from '../../creepSetups/setups';\r\nimport { OverlordPriority } from '../../priorities/priorities_overlords';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { Overlord } from '../Overlord';\r\n/**\r\n * Sends out a stationary scout, which travels to a waypoint and remains there indefinitely\r\n */\r\nlet StationaryScoutOverlord = class StationaryScoutOverlord extends Overlord {\r\n    constructor(directive, priority = OverlordPriority.scouting.stationary) {\r\n        super(directive, 'scout', priority);\r\n        this.scouts = this.zerg(Roles.scout, { notifyWhenAttacked: false });\r\n    }\r\n    init() {\r\n        this.wishlist(1, Setups.scout);\r\n    }\r\n    run() {\r\n        for (const scout of this.scouts) {\r\n            if (this.pos.roomName == scout.room.name) {\r\n                const enemyConstructionSites = scout.room.find(FIND_HOSTILE_CONSTRUCTION_SITES);\r\n                const squashTarget = _.first(enemyConstructionSites);\r\n                if (squashTarget) {\r\n                    scout.goTo(squashTarget);\r\n                    return;\r\n                }\r\n            }\r\n            if (!(scout.pos.inRangeTo(this.pos, 3) && !scout.pos.isEdge)) {\r\n                scout.goTo(this.pos, { range: 3 });\r\n            }\r\n        }\r\n    }\r\n};\r\nStationaryScoutOverlord = tslib_1.__decorate([\r\n    profile\r\n], StationaryScoutOverlord);\r\nexport { StationaryScoutOverlord };\r\n","references":["C:/git/Screeps-Revamped/src/creepSetups/setups.ts","C:/git/Screeps-Revamped/src/directives/Directive.ts","C:/git/Screeps-Revamped/src/priorities/priorities_overlords.ts","C:/git/Screeps-Revamped/src/profiler/decorator.ts","C:/git/Screeps-Revamped/src/zerg/Zerg.ts","C:/git/Screeps-Revamped/src/overlords/Overlord.ts"]}
