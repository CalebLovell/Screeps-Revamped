{"code":"import * as tslib_1 from \"tslib\";\r\nvar DirectiveNukeResponse_1;\r\nimport { log } from '../../console/log';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { Directive } from '../Directive';\r\nimport { NotifierPriority } from '../Notifier';\r\n/**\r\n * Nuke response: automatically over-fortify ramparts to withstand an incoming nuclear strike\r\n */\r\nlet DirectiveNukeResponse = DirectiveNukeResponse_1 = class DirectiveNukeResponse extends Directive {\r\n    constructor(flag) {\r\n        super(flag, colony => colony.name == Directive.getPos(flag).roomName\r\n            && colony.level >= DirectiveNukeResponse_1.requiredRCL);\r\n        this.refresh();\r\n    }\r\n    refresh() {\r\n        super.refresh();\r\n        this.nuke = this.pos.lookFor(LOOK_NUKES)[0]; // TODO: needs to handle multiple nukes on same pos\r\n    }\r\n    spawnMoarOverlords() {\r\n    }\r\n    init() {\r\n        if (this.nuke) {\r\n            this.alert(`Nuclear impact in ${this.nuke.timeToLand}`, NotifierPriority.Critical);\r\n        }\r\n        else {\r\n            this.alert(`Nuke response directive active!`, NotifierPriority.Critical);\r\n        }\r\n    }\r\n    run() {\r\n        // Build ramparts at all positions affected by nukes with structures on them\r\n        if (Game.time % 50 == 0) {\r\n            if (this.nuke) {\r\n                const rampartPositions = _.filter(this.nuke.pos.getPositionsInRange(2), function (pos) {\r\n                    // Rampart should be built to protect all non-road, non-barrier structures in nuke range\r\n                    return _.filter(pos.lookFor(LOOK_STRUCTURES), s => s.structureType != STRUCTURE_ROAD &&\r\n                        s.structureType != STRUCTURE_RAMPART &&\r\n                        s.structureType != STRUCTURE_WALL).length > 0;\r\n                });\r\n                for (const pos of rampartPositions) {\r\n                    // Build a rampart if there isn't one already\r\n                    if (!pos.lookForStructure(STRUCTURE_RAMPART)) {\r\n                        pos.createConstructionSite(STRUCTURE_RAMPART);\r\n                    }\r\n                }\r\n                log.alert(`Incoming nuke at ${this.nuke.pos.print}! Time until impact: ${this.nuke.timeToLand}`);\r\n            }\r\n            else {\r\n                // Remove once nuke is gone\r\n                this.remove();\r\n            }\r\n        }\r\n    }\r\n};\r\nDirectiveNukeResponse.directiveName = 'nukeResponse';\r\nDirectiveNukeResponse.color = COLOR_ORANGE;\r\nDirectiveNukeResponse.secondaryColor = COLOR_BLUE;\r\nDirectiveNukeResponse.requiredRCL = 4;\r\nDirectiveNukeResponse = DirectiveNukeResponse_1 = tslib_1.__decorate([\r\n    profile\r\n], DirectiveNukeResponse);\r\nexport { DirectiveNukeResponse };\r\n","references":["C:/git/Screeps-Revamped/src/console/log.ts","C:/git/Screeps-Revamped/src/profiler/decorator.ts","C:/git/Screeps-Revamped/src/directives/Directive.ts","C:/git/Screeps-Revamped/src/directives/Notifier.ts"]}
