{"code":"import * as tslib_1 from \"tslib\";\r\nimport { CombatSetups, Roles } from '../../creepSetups/setups';\r\nimport { CombatIntel } from '../../intel/CombatIntel';\r\nimport { OverlordPriority } from '../../priorities/priorities_overlords';\r\nimport { profile } from '../../profiler/decorator';\r\nimport { boostResources } from '../../resources/map_resources';\r\nimport { CombatOverlord } from '../CombatOverlord';\r\n/**\r\n * Spawns ranged defenders to defend against incoming player invasions in an owned room\r\n */\r\nlet RangedDefenseOverlord = class RangedDefenseOverlord extends CombatOverlord {\r\n    constructor(directive, boosted = false, priority = OverlordPriority.defense.rangedDefense) {\r\n        super(directive, 'rangedDefense', priority, 1);\r\n        this.hydralisks = this.combatZerg(Roles.ranged, {\r\n            boostWishlist: boosted ? [boostResources.tough[3], boostResources.ranged_attack[3],\r\n                boostResources.heal[3], boostResources.move[3]] : undefined\r\n        });\r\n    }\r\n    handleDefender(hydralisk) {\r\n        if (this.room.hostiles.length > 0) {\r\n            hydralisk.autoCombat(this.room.name);\r\n        }\r\n        else {\r\n            hydralisk.doMedicActions(this.room.name);\r\n        }\r\n    }\r\n    computeNeededHydraliskAmount(setup, boostMultiplier) {\r\n        const healAmount = CombatIntel.maxHealingByCreeps(this.room.hostiles);\r\n        const hydraliskDamage = RANGED_ATTACK_POWER * boostMultiplier\r\n            * setup.getBodyPotential(RANGED_ATTACK, this.colony);\r\n        const towerDamage = this.room.hostiles[0] ? CombatIntel.towerDamageAtPos(this.room.hostiles[0].pos) || 0 : 0;\r\n        const worstDamageMultiplier = _.min(_.map(this.room.hostiles, creep => CombatIntel.minimumDamageTakenMultiplier(creep)));\r\n        return Math.ceil(.5 + 1.5 * healAmount / (worstDamageMultiplier * (hydraliskDamage + towerDamage + 1)));\r\n    }\r\n    init() {\r\n        this.reassignIdleCreeps(Roles.ranged);\r\n        if (this.canBoostSetup(CombatSetups.hydralisks.boosted_T3)) {\r\n            const setup = CombatSetups.hydralisks.boosted_T3;\r\n            this.wishlist(this.computeNeededHydraliskAmount(setup, BOOSTS.ranged_attack.XKHO2.rangedAttack), setup);\r\n        }\r\n        else {\r\n            const setup = CombatSetups.hydralisks.default;\r\n            this.wishlist(this.computeNeededHydraliskAmount(setup, 1), setup);\r\n        }\r\n    }\r\n    run() {\r\n        this.autoRun(this.hydralisks, hydralisk => this.handleDefender(hydralisk));\r\n    }\r\n};\r\nRangedDefenseOverlord.settings = {\r\n    retreatHitsPercent: 0.85,\r\n    reengageHitsPercent: 0.95,\r\n};\r\nRangedDefenseOverlord = tslib_1.__decorate([\r\n    profile\r\n], RangedDefenseOverlord);\r\nexport { RangedDefenseOverlord };\r\n","references":["C:/git/Screeps-Revamped/src/creepSetups/CreepSetup.ts","C:/git/Screeps-Revamped/src/creepSetups/setups.ts","C:/git/Screeps-Revamped/src/directives/defense/invasionDefense.ts","C:/git/Screeps-Revamped/src/intel/CombatIntel.ts","C:/git/Screeps-Revamped/src/priorities/priorities_overlords.ts","C:/git/Screeps-Revamped/src/profiler/decorator.ts","C:/git/Screeps-Revamped/src/resources/map_resources.ts","C:/git/Screeps-Revamped/src/zerg/CombatZerg.ts","C:/git/Screeps-Revamped/src/overlords/CombatOverlord.ts"]}
