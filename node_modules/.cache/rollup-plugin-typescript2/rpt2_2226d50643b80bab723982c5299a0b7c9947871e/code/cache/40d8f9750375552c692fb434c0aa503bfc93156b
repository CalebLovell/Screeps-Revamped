{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Movement } from '../movement/Movement';\r\nimport { profile } from '../profiler/decorator';\r\nimport { CombatZerg } from './CombatZerg';\r\nconst AVOID_RANGE = 4;\r\nconst APPROACH_RANGE = 1;\r\n/**\r\n * NeuralZerg augments CombatZerg with some additional simplified actions suitable for use in reinforcement learning\r\n * training scenarios\r\n */\r\nlet NeuralZerg = class NeuralZerg extends CombatZerg {\r\n    constructor(creep, notifyWhenAttacked = true) {\r\n        super(creep, notifyWhenAttacked);\r\n        this.isBot = creep.name.includes('_BOT');\r\n    }\r\n    approachHostiles() {\r\n        const approach = _.map(this.room.hostiles, hostile => ({ pos: hostile.pos, range: APPROACH_RANGE }));\r\n        return Movement.combatMove(this, approach, []);\r\n    }\r\n    avoidHostiles() {\r\n        const avoid = _.map(this.room.hostiles, hostile => ({ pos: hostile.pos, range: AVOID_RANGE }));\r\n        return Movement.combatMove(this, [], avoid);\r\n    }\r\n    approachAllies() {\r\n        const approach = _.map(this.room.creeps, friendly => ({ pos: friendly.pos, range: APPROACH_RANGE }));\r\n        return Movement.combatMove(this, approach, []);\r\n    }\r\n    avoidAllies() {\r\n        const avoid = _.map(this.room.creeps, friendly => ({ pos: friendly.pos, range: AVOID_RANGE }));\r\n        return Movement.combatMove(this, [], avoid);\r\n    }\r\n    maneuver(approachTargs, avoidTargs) {\r\n        const approach = _.map(approachTargs, targ => ({ pos: targ.pos, range: APPROACH_RANGE }));\r\n        const avoid = _.map(avoidTargs, targ => ({ pos: targ.pos, range: AVOID_RANGE }));\r\n        return Movement.combatMove(this, approach, avoid);\r\n    }\r\n    autoEngage(combatTarget) {\r\n        const target = combatTarget ? [combatTarget.creep] : undefined;\r\n        // Do standard melee, ranged, and heal actions\r\n        if (this.getActiveBodyparts(ATTACK) > 0) {\r\n            this.autoMelee(target); // Melee should be performed first\r\n        }\r\n        if (this.getActiveBodyparts(RANGED_ATTACK) > 0) {\r\n            this.autoRanged(target);\r\n        }\r\n        if (this.canExecute('heal')) {\r\n            this.autoHeal(this.canExecute('rangedHeal'));\r\n        }\r\n    }\r\n};\r\nNeuralZerg = tslib_1.__decorate([\r\n    profile\r\n], NeuralZerg);\r\nexport { NeuralZerg };\r\n","references":["C:/git/Screeps-Revamped/src/movement/Movement.ts","C:/git/Screeps-Revamped/src/profiler/decorator.ts","C:/git/Screeps-Revamped/src/zerg/CombatZerg.ts"]}
